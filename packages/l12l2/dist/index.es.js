/**
                       * @license
                       * author: TanglePay
                       * tanglepaysdk-l1tol2.js v0.1.6
                       * Released under the Apache-2.0 license.
                       */
import e from"big-integer";import{WriteStream as t,Converter as n,ReadStream as r}from"@iota/util.js";function a(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function s(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}let o;const i=new Array(128).fill(void 0);function u(e){return i[e]}i.push(void 0,null,!0,!1);let c=i.length;function d(e){const t=u(e);return function(e){e<132||(i[e]=c,c=e)}(e),t}let l=0,f=null;function p(){return null!==f&&0!==f.byteLength||(f=new Uint8Array(o.memory.buffer)),f}const h=new TextEncoder("utf-8"),g="function"==typeof h.encodeInto?function(e,t){return h.encodeInto(e,t)}:function(e,t){const n=h.encode(e);return t.set(n),{read:e.length,written:n.length}};function _(e,t,n){if(void 0===n){const n=h.encode(e),r=t(n.length);return p().subarray(r,r+n.length).set(n),l=n.length,r}let r=e.length,a=t(r);const s=p();let o=0;for(;o<r;o++){const t=e.charCodeAt(o);if(t>127)break;s[a+o]=t}if(o!==r){0!==o&&(e=e.slice(o)),a=n(a,r,r=o+3*e.length);const t=p().subarray(a+o,a+r);o+=g(e,t).written}return l=o,a}function b(e){return null==e}let w=null;function y(){return null!==w&&0!==w.byteLength||(w=new Int32Array(o.memory.buffer)),w}const v=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});function m(e,t){return v.decode(p().subarray(e,e+t))}function O(e){c===i.length&&i.push(i.length+1);const t=c;return c=i[t],i[t]=e,t}function I(e){const t=typeof e;if("number"==t||"boolean"==t||null==e)return`${e}`;if("string"==t)return`"${e}"`;if("symbol"==t){const t=e.description;return null==t?"Symbol":`Symbol(${t})`}if("function"==t){const t=e.name;return"string"==typeof t&&t.length>0?`Function(${t})`:"Function"}if(Array.isArray(e)){const t=e.length;let n="[";t>0&&(n+=I(e[0]));for(let r=1;r<t;r++)n+=", "+I(e[r]);return n+="]",n}const n=/\[object ([^\]]+)\]/.exec(toString.call(e));let r;if(!(n.length>1))return toString.call(e);if(r=n[1],"Object"==r)try{return"Object("+JSON.stringify(e)+")"}catch(e){return"Object"}return e instanceof Error?`${e.name}: ${e.message}\n${e.stack}`:r}v.decode();const S=new FinalizationRegistry((e=>{o.__wbindgen_export_2.get(e.dtor)(e.a,e.b)}));function k(e,t,n,r){const a={a:e,b:t,cnt:1,dtor:n},s=(...e)=>{a.cnt++;const t=a.a;a.a=0;try{return r(t,a.b,...e)}finally{0==--a.cnt?(o.__wbindgen_export_2.get(a.dtor)(t,a.b),S.unregister(a)):a.a=t}};return s.original=a,S.register(s,a,a),s}function M(e,t){o._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__had9d5d30c8b835af(e,t)}function N(e,t,n){o._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hbc2f3d574014e74d(e,t,O(n))}function H(e,t){try{const a=o.__wbindgen_add_to_stack_pointer(-16),s=_(e,o.__wbindgen_malloc,o.__wbindgen_realloc),i=l;!function(e,t){if(!(e instanceof t))throw new Error(`expected instance of ${t.name}`);e.ptr}(t,A),o.sendMessageAsync(a,s,i,t.ptr);var n=y()[a/4+0],r=y()[a/4+1];if(y()[a/4+2])throw d(r);return d(n)}finally{o.__wbindgen_add_to_stack_pointer(16)}}let B=128;function x(e,t){try{const r=o.__wbindgen_add_to_stack_pointer(-16);o.listen(r,O(e),function(e){if(1==B)throw new Error("out of js stack");return i[--B]=e,B}(t));var n=y()[r/4+0];if(y()[r/4+1])throw d(n)}finally{o.__wbindgen_add_to_stack_pointer(16),i[B++]=void 0}}function T(e,t){try{return e.apply(this,t)}catch(e){o.__wbindgen_exn_store(O(e))}}const J=new FinalizationRegistry((e=>o.__wbg_messagehandler_free(e)));let A=class e{static __wrap(t){const n=Object.create(e.prototype);return n.ptr=t,J.register(n,n.ptr,n),n}__destroy_into_raw(){const e=this.ptr;return this.ptr=0,J.unregister(this),e}free(){const e=this.__destroy_into_raw();o.__wbg_messagehandler_free(e)}};function U(){const e={wbg:{}};return e.wbg.__wbindgen_object_drop_ref=function(e){d(e)},e.wbg.__wbindgen_cb_drop=function(e){const t=d(e).original;if(1==t.cnt--)return t.a=0,!0;return!1},e.wbg.__wbindgen_string_get=function(e,t){const n=u(t),r="string"==typeof n?n:void 0;var a=b(r)?0:_(r,o.__wbindgen_malloc,o.__wbindgen_realloc),s=l;y()[e/4+1]=s,y()[e/4+0]=a},e.wbg.__wbindgen_string_new=function(e,t){return O(m(e,t))},e.wbg.__wbg_new_abda76e883ba8a5f=function(){return O(new Error)},e.wbg.__wbg_stack_658279fe44541cf6=function(e,t){const n=_(u(t).stack,o.__wbindgen_malloc,o.__wbindgen_realloc),r=l;y()[e/4+1]=r,y()[e/4+0]=n},e.wbg.__wbg_error_f851667af71bcfc6=function(e,t){try{console.error(m(e,t))}finally{o.__wbindgen_free(e,t)}},e.wbg.__wbg_clearTimeout_76877dbc010e786d=function(e){return O(clearTimeout(d(e)))},e.wbg.__wbg_setTimeout_75cb9b6991a4031d=function(){return T((function(e,t){return O(setTimeout(u(e),t))}),arguments)},e.wbg.__wbindgen_object_clone_ref=function(e){return O(u(e))},e.wbg.__wbg_fetch_3a1be51760e1f8eb=function(e){return O(fetch(u(e)))},e.wbg.__wbg_fetch_661ffba2a4f2519c=function(e,t){return O(u(e).fetch(u(t)))},e.wbg.__wbg_instanceof_Response_fb3a4df648c1859b=function(e){let t;try{t=u(e)instanceof Response}catch{t=!1}return t},e.wbg.__wbg_url_8ec2534cdfacb103=function(e,t){const n=_(u(t).url,o.__wbindgen_malloc,o.__wbindgen_realloc),r=l;y()[e/4+1]=r,y()[e/4+0]=n},e.wbg.__wbg_status_d483a4ac847f380a=function(e){return u(e).status},e.wbg.__wbg_headers_6093927dc359903e=function(e){return O(u(e).headers)},e.wbg.__wbg_arrayBuffer_cb886e06a9e36e4d=function(){return T((function(e){return O(u(e).arrayBuffer())}),arguments)},e.wbg.__wbg_text_f61464d781b099f0=function(){return T((function(e){return O(u(e).text())}),arguments)},e.wbg.__wbg_now_c644db5194be8437=function(e){return u(e).now()},e.wbg.__wbg_newwithstrandinit_c45f0dc6da26fd03=function(){return T((function(e,t,n){return O(new Request(m(e,t),u(n)))}),arguments)},e.wbg.__wbg_new_f1c3a9c2533a55b8=function(){return T((function(){return O(new Headers)}),arguments)},e.wbg.__wbg_append_1be1d651f9ecf2eb=function(){return T((function(e,t,n,r,a){u(e).append(m(t,n),m(r,a))}),arguments)},e.wbg.__wbg_crypto_e1d53a1d73fb10b8=function(e){return O(u(e).crypto)},e.wbg.__wbindgen_is_object=function(e){const t=u(e);return"object"==typeof t&&null!==t},e.wbg.__wbg_process_038c26bf42b093f8=function(e){return O(u(e).process)},e.wbg.__wbg_versions_ab37218d2f0b24a8=function(e){return O(u(e).versions)},e.wbg.__wbg_node_080f4b19d15bc1fe=function(e){return O(u(e).node)},e.wbg.__wbindgen_is_string=function(e){return"string"==typeof u(e)},e.wbg.__wbg_msCrypto_6e7d3e1f92610cbb=function(e){return O(u(e).msCrypto)},e.wbg.__wbg_require_78a3dcfbdba9cbce=function(){return T((function(){return O(module.require)}),arguments)},e.wbg.__wbindgen_is_function=function(e){return"function"==typeof u(e)},e.wbg.__wbg_getRandomValues_805f1c3d65988a5a=function(){return T((function(e,t){u(e).getRandomValues(u(t))}),arguments)},e.wbg.__wbg_randomFillSync_6894564c2c334c42=function(){return T((function(e,t,n){var r,a;u(e).randomFillSync((r=t,a=n,p().subarray(r/1,r/1+a)))}),arguments)},e.wbg.__wbg_newnoargs_2b8b6bd7753c76ba=function(e,t){return O(new Function(m(e,t)))},e.wbg.__wbg_next_b7d530c04fd8b217=function(e){return O(u(e).next)},e.wbg.__wbg_next_88560ec06a094dea=function(){return T((function(e){return O(u(e).next())}),arguments)},e.wbg.__wbg_done_1ebec03bbd919843=function(e){return u(e).done},e.wbg.__wbg_value_6ac8da5cc5b3efda=function(e){return O(u(e).value)},e.wbg.__wbg_iterator_55f114446221aa5a=function(){return O(Symbol.iterator)},e.wbg.__wbg_get_baf4855f9a986186=function(){return T((function(e,t){return O(Reflect.get(u(e),u(t)))}),arguments)},e.wbg.__wbg_call_95d1ea488d03e4e8=function(){return T((function(e,t){return O(u(e).call(u(t)))}),arguments)},e.wbg.__wbg_new_f9876326328f45ed=function(){return O(new Object)},e.wbg.__wbg_self_e7c1f827057f6584=function(){return T((function(){return O(self.self)}),arguments)},e.wbg.__wbg_window_a09ec664e14b1b81=function(){return T((function(){return O(window.window)}),arguments)},e.wbg.__wbg_globalThis_87cbb8506fecf3a9=function(){return T((function(){return O(globalThis.globalThis)}),arguments)},e.wbg.__wbg_global_c85a9259e621f3db=function(){return T((function(){return O(global.global)}),arguments)},e.wbg.__wbindgen_is_undefined=function(e){return void 0===u(e)},e.wbg.__wbg_new_15d3966e9981a196=function(e,t){return O(new Error(m(e,t)))},e.wbg.__wbg_call_9495de66fdbe016b=function(){return T((function(e,t,n){return O(u(e).call(u(t),u(n)))}),arguments)},e.wbg.__wbg_now_931686b195a14f9d=function(){return Date.now()},e.wbg.__wbg_new_9d3a9ce4282a18a8=function(e,t){try{var n={a:e,b:t};const r=new Promise(((e,t)=>{const r=n.a;n.a=0;try{return function(e,t,n,r){o.wasm_bindgen__convert__closures__invoke2_mut__h99161b361b26b47d(e,t,O(n),O(r))}(r,n.b,e,t)}finally{n.a=r}}));return O(r)}finally{n.a=n.b=0}},e.wbg.__wbg_resolve_fd40f858d9db1a04=function(e){return O(Promise.resolve(u(e)))},e.wbg.__wbg_then_ec5db6d509eb475f=function(e,t){return O(u(e).then(u(t)))},e.wbg.__wbg_then_f753623316e2873a=function(e,t,n){return O(u(e).then(u(t),u(n)))},e.wbg.__wbg_buffer_cf65c07de34b9a08=function(e){return O(u(e).buffer)},e.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5=function(e,t,n){return O(new Uint8Array(u(e),t>>>0,n>>>0))},e.wbg.__wbg_new_537b7341ce90bb31=function(e){return O(new Uint8Array(u(e)))},e.wbg.__wbg_set_17499e8aa4003ebd=function(e,t,n){u(e).set(u(t),n>>>0)},e.wbg.__wbg_length_27a2afe8ab42b09f=function(e){return u(e).length},e.wbg.__wbg_newwithlength_b56c882b57805732=function(e){return O(new Uint8Array(e>>>0))},e.wbg.__wbg_subarray_7526649b91a252a6=function(e,t,n){return O(u(e).subarray(t>>>0,n>>>0))},e.wbg.__wbg_has_3feea89d34bd7ad5=function(){return T((function(e,t){return Reflect.has(u(e),u(t))}),arguments)},e.wbg.__wbg_set_6aa458a4ebdb65cb=function(){return T((function(e,t,n){return Reflect.set(u(e),u(t),u(n))}),arguments)},e.wbg.__wbg_stringify_029a979dfb73aa17=function(){return T((function(e){return O(JSON.stringify(u(e)))}),arguments)},e.wbg.__wbindgen_debug_string=function(e,t){const n=_(I(u(t)),o.__wbindgen_malloc,o.__wbindgen_realloc),r=l;y()[e/4+1]=r,y()[e/4+0]=n},e.wbg.__wbindgen_throw=function(e,t){throw new Error(m(e,t))},e.wbg.__wbindgen_memory=function(){return O(o.memory)},e.wbg.__wbindgen_closure_wrapper3311=function(e,t,n){return O(k(e,t,719,M))},e.wbg.__wbindgen_closure_wrapper3427=function(e,t,n){return O(k(e,t,792,N))},e}async function P(e){const t=U();("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:r}=await async function(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}(await e,t);return function(e,t){return o=e.exports,P.__wbindgen_wasm_module=t,w=null,f=null,o.__wbindgen_start(),o}(n,r)}let F=!1;function L(e){return F?Promise.resolve(o):P(e||"client_wasm_bg.wasm").then((()=>(F=!0,o)))}var R,C=function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))},j=function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},E=function(){function e(e){this.messageHandler=function(e){try{const s=o.__wbindgen_add_to_stack_pointer(-16);var t=b(e)?0:_(e,o.__wbindgen_malloc,o.__wbindgen_realloc),n=l;o.messageHandlerNew(s,t,n);var r=y()[s/4+0],a=y()[s/4+1];if(y()[s/4+2])throw d(a);return A.__wrap(r)}finally{o.__wbindgen_add_to_stack_pointer(16)}}(JSON.stringify(e))}return e.prototype.sendMessage=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(t){return[2,H(JSON.stringify(e),this.messageHandler)]}))}))},e.prototype.listen=function(e,t){return C(this,void 0,void 0,(function(){return j(this,(function(n){return[2,x(e,t,this.messageHandler)]}))}))},e}(),q=function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))},D=function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},W=function(){function e(e){this.messageHandler=new E(e)}return e.prototype.getInfo=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getInfo"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getNetworkInfo=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNetworkInfo"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.basicOutputIds=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"basicOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getOutput=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getOutput",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getOutputs=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getOutputs",data:{outputIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.generateMnemonic=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"generateMnemonic"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.mnemonicToHexSeed=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"mnemonicToHexSeed",data:{mnemonic:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeAliasId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeAliasId",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeNftId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeNftId",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeFoundryId=function(e,t,n){return q(this,void 0,void 0,(function(){var r;return D(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeFoundryId",data:{aliasAddress:e,serialNumber:t,tokenSchemeKind:n}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.generateAddresses=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"generateAddresses",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.buildAndPostBlock=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildAndPostBlock",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getTips=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTips"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.postBlock=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlock",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlock=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlock",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlockMetadata=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlockMetadata",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.findInputs=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"findInputs",data:{addresses:e,amount:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.findOutputs=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"findOutputs",data:{outputIds:e,addresses:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getLedgerNanoStatus=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getLedgerNanoStatus",data:{isSimulator:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.prepareTransaction=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"prepareTransaction",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.storeMnemonic=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"storeMnemonic",data:{secretManager:e,mnemonic:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.signTransaction=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"signTransaction",data:{secretManager:e,preparedTransactionData:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.signatureUnlock=function(e,t,n){return q(this,void 0,void 0,(function(){var r;return D(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"signatureUnlock",data:{secretManager:e,inputSigningData:t,transactionEssenceHash:n,remainderData:void 0}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.postBlockPayload=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlockPayload",data:{payload:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.parseBech32Address=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"parseBech32Address",data:{address:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.blockId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"blockId",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getNode=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNode"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getNetworkId=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNetworkId"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getBech32Hrp=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBech32Hrp"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getMinPowScore=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMinPowScore"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getTipsInterval=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTipsInterval"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getTokenSupply=function(){return q(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this.getProtocolParameters()];case 1:return[2,e.sent().tokenSupply]}}))}))},e.prototype.getProtocolParameters=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getProtocolParameters"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getLocalPow=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getLocalPow"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getFallbackToLocalPow=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getFallbackToLocalPow"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getHealth=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getHealth",data:{url:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getNodeInfo=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNodeInfo",data:{url:e,auth:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getPeers=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getPeers"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.postBlockRaw=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlockRaw",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlockRaw=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlockRaw",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getMilestoneById=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMilestoneById",data:{milestoneId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getUtxoChangesById=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getUtxoChangesById",data:{milestoneId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getMilestoneByIndex=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMilestoneByIndex",data:{index:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getUtxoChangesByIndex=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getUtxoChangesByIndex",data:{index:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getReceipts=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getReceipts"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getReceiptsMigratedAt=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getReceiptsMigratedAt",data:{milestoneIndex:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getTreasury=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTreasury"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getIncludedBlock=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getIncludedBlock",data:{transactionId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getIncludedBlockMetadata=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getIncludedBlockMetadata",data:{transactionId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.bech32ToHex=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"bech32ToHex",data:{bech32:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.hexToBech32=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"hexToBech32",data:{hex:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.aliasIdToBech32=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasIdToBech32",data:{aliasId:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.nftIdToBech32=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftIdToBech32",data:{nftId:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.hexPublicKeyToBech32Address=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"hexPublicKeyToBech32Address",data:{hex:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.isAddressValid=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"isAddressValid",data:{address:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.aliasOutputIds=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.aliasOutputId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasOutputId",data:{aliasId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.nftOutputIds=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.nftOutputId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftOutputId",data:{nftId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.foundryOutputIds=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"foundryOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.foundryOutputId=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"foundryOutputId",data:{foundryId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.tryGetOutputs=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"tryGetOutputs",data:{outputIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.findBlocks=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"findBlocks",data:{blockIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.retry=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"retry",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.retryUntilIncluded=function(e,t,n){return q(this,void 0,void 0,(function(){var r;return D(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"retryUntilIncluded",data:{blockId:e,interval:t,maxAttempts:n}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.consolidateFunds=function(e,t){return q(this,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"consolidateFunds",data:{secretManager:e,generateAddressesOptions:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.reattach=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"reattach",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.reattachUnchecked=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"reattachUnchecked",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.promote=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"promote",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.promoteUnchecked=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"promoteUnchecked",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.unhealthyNodes=function(){return q(this,void 0,void 0,(function(){var e;return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"unhealthyNodes"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.buildBasicOutput=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildBasicOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildAliasOutput=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildAliasOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildFoundryOutput=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildFoundryOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildNftOutput=function(e){return q(this,void 0,void 0,(function(){var t;return D(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildNftOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.listen=function(e,t){return q(this,void 0,void 0,(function(){return D(this,(function(n){return[2,this.messageHandler.listen(e,t)]}))}))},e.prototype.clearListeners=function(e){return q(this,void 0,void 0,(function(){return D(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"clearListeners",data:{topics:e}})];case 1:return t.sent(),[2]}}))}))},e}();!function(e){e[e.IOTA=4218]="IOTA",e[e.Shimmer=4219]="Shimmer"}(R||(R={}));var G,$,K={colorEnabled:!0,name:"./client.log",levelFilter:"debug"},V=function(e){return void 0===e&&(e=K),t=JSON.stringify(e),void o.initLogger(O(t));var t};!function(e){e.LedgerNanoS="ledgerNanoS",e.LedgerNanoX="ledgerNanoX",e.LedgerNanoSPlus="ledgerNanoSPlus"}(G||(G={})),function(e){e[e.Mainnet=0]="Mainnet",e[e.Testnet=1]="Testnet"}($||($={}));var z,X=e(5e5);!function(e){e[e.Set=0]="Set",e[e.NotSet=255]="NotSet"}(z||(z={}));var Q={1011572226:"Accounts"},Y={603251617:"transferAllowanceTo"};function Z(e,t){return void 0===t&&(t=!1),t?"0x"+e.toString(16):e.toString(16)}var ee=new(function(){function o(){}return o.prototype.setup=function(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,L(e||"./client_wasm_bg.wasm")];case 1:return t.sent(),[4,V()];case 2:return t.sent(),this._client=new W({nodes:["https://api.testnet.shimmer.network"],localPow:!0}),[2]}}))}))},o.prototype._addGasBudget=function(t){return e(t).add(X).toString()},o.prototype._encodeSmartContractParameters=function(e){var r=new t;r.writeUInt32("parametersLength",e.length);for(var a=0,s=e;a<s.length;a++){var o=s[a],i=o[0],u=o[1],c=n.utf8ToBytes(i);r.writeUInt16("keyLength",i.length),r.writeBytes("keyBytes",c.length,c);var d=n.hexToBytes(u);r.writeUInt32("valueLength",d.length),r.writeBytes("valueBytes",d.length,d)}return r.finalBytes()},o.prototype._getSecretManager=function(){return{mnemonic:this._mnemonic}},o.prototype.setMnemonic=function(e){this._mnemonic=e},o.prototype.getOutputForSend=function(t){return a(this,void 0,void 0,(function(){var n,r,a,o,i,u;return s(this,(function(s){switch(s.label){case 0:return n=e(t),[4,this.getUnspentOutputs()];case 1:if(!(r=s.sent()))return[2];for(a=0,o=r;a<o.length;a++)if(i=o[a],u=i.output,e(u.amount).geq(n))return[2,i];return[2,void 0]}}))}))},o.prototype.getOutputForNftSend=function(e){return a(this,void 0,void 0,(function(){var t,n,r,a;return s(this,(function(s){switch(s.label){case 0:return[4,this.getNftOutputs()];case 1:if(!(t=s.sent()))return[2];for(n=0,r=t;n<r.length;n++)if((a=r[n]).output.nftId===e)return[2,a];return[2]}}))}))},o.prototype.getNftOutputs=function(){var e;return a(this,void 0,void 0,(function(){var t,n;return s(this,(function(r){switch(r.label){case 0:return this._client?[4,this._client.nftOutputIds([{address:null!==(e=this._fromAddressBech32)&&void 0!==e?e:""}])]:[2];case 1:return t=r.sent(),[4,this._client.getOutputs(t)];case 2:return n=r.sent(),console.log("all nft outputs",n),[2,n]}}))}))},o.prototype.getUnspentOutputs=function(){var e;return a(this,void 0,void 0,(function(){var t,n;return s(this,(function(r){switch(r.label){case 0:return this._client?[4,this._client.basicOutputIds([{address:null!==(e=this._fromAddressBech32)&&void 0!==e?e:""},{hasExpiration:!1},{hasTimelock:!1},{hasStorageDepositReturn:!1}])]:[2];case 1:return t=r.sent(),[4,this._client.getOutputs(t)];case 2:return n=r.sent(),console.log("all outputs",n),n=n.filter((function(e){return!e.metadata.isSpent})),console.log("unspent outputs",n),[2,n]}}))}))},o.prototype.prepareAddress=function(){var e,t;return a(this,void 0,void 0,(function(){var n,r,a;return s(this,(function(s){switch(s.label){case 0:return null!=this._fromAddressBech32?[3,3]:(n=this._getSecretManager(),[4,null===(e=this._client)||void 0===e?void 0:e.generateAddresses(n,{accountIndex:0,range:{start:0,end:1}})]);case 1:return r=s.sent(),console.log("address",r),this._fromAddressBech32=r?r[0]:void 0,this._fromAddressBech32?(a=this,[4,null===(t=this._client)||void 0===t?void 0:t.bech32ToHex(this._fromAddressBech32)]):[3,3];case 2:a._fromAddressHex=s.sent(),s.label=3;case 3:return[2]}}))}))},o.prototype._encodeAddress=function(e){var r=new t;r.writeUInt8("Address Type ID",3);for(var a=n.hexToBytes(e),s=0;s<a.length;s++)r.writeUInt8("Address byte",a[s]);return r.finalHex()},o.prototype._getLayer2MetadataForTransfer=function(e,n,r,a){var s=new t;s.writeUInt32("senderContract",0),s.writeUInt32("targetContract",1011572226),s.writeUInt32("contractFunction",603251617),s.writeUInt64("gasBudget",X);var o=this._encodeAddress(e.toLowerCase()),i=Object.entries({a:o}),u=this._encodeSmartContractParameters(i);s.writeBytes("smartContractParameters",u.length,u);var c=this._encodeAllowance(n,r,a);return s.writeBytes("allowance",c.length,c),s.writeUInt16("end",0),"0x"+s.finalHex()},o.prototype._encodeAllowance=function(r,a,s){var o=new t,i=new t;if(o.writeUInt8("encodedAllowance",z.Set),null==a)o.writeUInt64("iotaAmount",e(r)),o.writeUInt16("noTokens",2),o.writeUInt16("emptyTokenBuffer",0);else{o.writeUInt64("iotaAmount",e(null!=s?s:"0")),i.writeUInt16("amountOfTokens",1);var u=n.hexToBytes(a.substring(2));i.writeBytes("tokenId",u.length,u),i.writeUInt256("amount",e(r));var c=i.finalBytes();o.writeUInt16("tokensLength",c.length),o.writeBytes("tokenBuffer",c.length,c)}return o.finalBytes()},o.prototype._getAmountFromTransactionDetails=function(e){var t=e.rawAmount,n=e.nftId,r=e.nativeTokenId,a=e.surplus;return null!=(t=n?n&&null!=a?a:"0":r?null!=a?a:"0":BigInt(t).toString())?t:"0"},o.prototype.getOutputOptions=function(t,r,o,i){return a(this,void 0,void 0,(function(){var a,u,c,d,l,f,p,h,g,_,b,w,y,v,m;return s(this,(function(s){switch(s.label){case 0:return a=i.nativeTokenId,u=i.metadata,c=i.tag,i.giftStorageDeposit,d=i.surplus,l=i.layer2Parameters,f=i.nftId,p=i.nftOutput,h=i.expirationDate,g=h?(O=h)?Math.round(O.getTime()/1e3):O:void 0,_=this._getAmountFromTransactionDetails({rawAmount:o,nftId:f,nativeTokenId:a,surplus:d}),_=l?this._addGasBudget(_):_,b=e(o),null!=c&&(c=n.utf8ToHex(c,!0)),u=l?this._getLayer2MetadataForTransfer(r,o,a,d):u?n.utf8ToHex(u,!0):u,l?[4,this._client.bech32ToHex(l.networkAddress)]:[3,2];case 1:return w=s.sent(),[3,3];case 2:w=r,s.label=3;case 3:return r=w,y={},f?y.nftId=f:a&&(y.nativeTokens=[{id:a,amount:"0x"+b.toString(16)}]),v=[],u&&v.push({type:2,data:u}),l&&v.push({type:0,address:t}),c&&v.push({type:3,tag:c}),m=[{type:0,address:{type:8,aliasId:"0xdc8631d5f2a0107200cf12cfec273342432c73db16ad4a7cb6a066e00abd8f0c"}}],g&&m.push({type:2,unixTime:g}),f&&p?[2,{type:6,amount:this._addGasBudget(p.amount),nftId:f,immutableFeatures:p.immutableFeatures,features:v,unlockConditions:m}]:[2,{type:3,amount:_,features:v,unlockConditions:m}]}var O}))}))},o.prototype.sendTransaction=function(t,n,r){var o,i;return a(this,void 0,void 0,(function(){var a,u,c,d,l,f,p,h,g,_,b,w,y,v,m,O;return s(this,(function(s){switch(s.label){case 0:return this._client&&this._fromAddressBech32?r?[4,this.getOutputForNftSend(r)]:[3,2]:[2];case 1:a=s.sent(),s.label=2;case 2:return[4,this.getOutputForSend(n)];case 3:return null==(u=s.sent())?[2]:(c=e(u.output.amount),d=e(n),(l=[]).push({type:0,transactionId:u.metadata.transactionId,transactionOutputIndex:u.metadata.outputIndex}),a&&l.push({type:0,transactionId:a.metadata.transactionId,transactionOutputIndex:a.metadata.outputIndex}),f=[],[4,this.getOutputOptions({type:0,pubKeyHash:null!==(o=this._fromAddressHex)&&void 0!==o?o:""},t,n,{nftId:r,nftOutput:null==a?void 0:a.output,layer2Parameters:{networkAddress:"rms1prwgvvw472spqusqeufvlmp8xdpyxtrnmvt26jnuk6sxdcq2hk8scku26h7"}})]);case 4:return p=s.sent(),console.log("receiveroutputs",p),f.push(p),c.gt(d)&&(h=c.minus(e(p.amount)),g={type:3,amount:h.toString(),nativeTokens:[],unlockConditions:[{type:0,address:{type:0,pubKeyHash:null!==(i=this._fromAddressHex)&&void 0!==i?i:""}}],features:[]},f.push(g)),console.log(f),_=this._getSecretManager(),b={inputs:l,outputs:f},console.log(b),[4,this._client.prepareTransaction(_,b)];case 5:return w=s.sent(),console.log(w),[4,this._client.signTransaction(_,w)];case 6:return y=s.sent(),console.log(y),[4,this._client.postBlockPayload(y)];case 7:return v=s.sent(),m=v[0],O=v[1],console.log(m,O),[2]}}))}))},o.prototype.ed2bech32=function(e){var t;null===(t=this._client)||void 0===t||t.hexToBech32(e,"rms")},o.prototype.parseLayer2MetadataForTransfer=function(e){var t,a,s=n.hexToBytes(e),o=new r(s),i=o.readUInt32("senderContract"),u=o.readUInt32("targetContract"),c=o.readUInt32("contractFunction"),d=o.readUInt64("gasBudget"),l="0x"+this._parseSmartContractParameters(o).a.substring(2),f=this._parseAllowance(o);return{senderContract:Z(i,!0),targetContract:null!==(t=Q[u])&&void 0!==t?t:Z(u,!0),contractFunction:null!==(a=Y[c])&&void 0!==a?a:Z(c,!0),gasBudget:d.toString(),ethereumAddress:l,baseTokenAmount:null==f?void 0:f.baseTokenAmount,nativeTokens:null==f?void 0:f.nativeTokens}},o.prototype._parseSmartContractParameters=function(e){for(var t=e.readUInt32("parametersLength"),r={},a=0;a<t;a++){var s=e.readUInt16("keyLength"),o=e.readBytes("keyValue",s),i=e.readUInt32("valueLength"),u=e.readBytes("valueBytes",i),c=n.bytesToUtf8(o),d=n.bytesToHex(u);r[c]=d}return r},o.prototype._parseAllowance=function(e){if(e.readUInt8("allowance")===z.Set){var t=e.readUInt64("baseTokenAmount").toString();e.readUInt16("tokenBufferBytesLength");for(var r=e.readUInt16("tokenAmount"),a=[],s=0;s<r;s++){var o=n.bytesToHex(e.readBytes("tokenId",38)),i=e.readUInt256("tokenAmount").toString();a.push({tokenId:o,amount:i})}return{baseTokenAmount:t,nativeTokens:a}}},o}());window.l1tol2=ee;export{ee as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGlvdGEvY2xpZW50LXdhc20vd2ViL3dhc20vY2xpZW50X3dhc20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGlvdGEvY2xpZW50LXdhc20vd2ViL2xpYi9NZXNzYWdlSGFuZGxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AaW90YS9jbGllbnQtd2FzbS93ZWIvbGliL2NvbnN0YW50cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AaW90YS9jbGllbnQtd2FzbS93ZWIvbGliL0NsaWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AaW90YS9jbGllbnQtd2FzbS93ZWIvbGliL2xvZ2dlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AaW90YS9jbGllbnQtd2FzbS93ZWIvdHlwZXMvbGVkZ2VyTmFub1N0YXR1cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AaW90YS9jbGllbnQtd2FzbS93ZWIvdHlwZXMvbmV0d29yay5qcyIsIi4uL3NyYy9jb25zdGFudC50cyIsIi4uL3NyYy90eXBlcy50cyIsIi4uL3NyYy91dGlsLnRzIiwiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XHJcbiAgICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cclxuICAgIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XHJcbiAgICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xyXG4gICAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcclxuICAgICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnB1c2goXyk7XHJcbiAgICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XHJcbiAgICBkb25lID0gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XHJcbiAgICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcclxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwibGV0IHdhc207XG5cbmNvbnN0IGhlYXAgPSBuZXcgQXJyYXkoMTI4KS5maWxsKHVuZGVmaW5lZCk7XG5cbmhlYXAucHVzaCh1bmRlZmluZWQsIG51bGwsIHRydWUsIGZhbHNlKTtcblxuZnVuY3Rpb24gZ2V0T2JqZWN0KGlkeCkgeyByZXR1cm4gaGVhcFtpZHhdOyB9XG5cbmxldCBoZWFwX25leHQgPSBoZWFwLmxlbmd0aDtcblxuZnVuY3Rpb24gZHJvcE9iamVjdChpZHgpIHtcbiAgICBpZiAoaWR4IDwgMTMyKSByZXR1cm47XG4gICAgaGVhcFtpZHhdID0gaGVhcF9uZXh0O1xuICAgIGhlYXBfbmV4dCA9IGlkeDtcbn1cblxuZnVuY3Rpb24gdGFrZU9iamVjdChpZHgpIHtcbiAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoaWR4KTtcbiAgICBkcm9wT2JqZWN0KGlkeCk7XG4gICAgcmV0dXJuIHJldDtcbn1cblxubGV0IFdBU01fVkVDVE9SX0xFTiA9IDA7XG5cbmxldCBjYWNoZWRVaW50OE1lbW9yeTAgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRVaW50OE1lbW9yeTAoKSB7XG4gICAgaWYgKGNhY2hlZFVpbnQ4TWVtb3J5MCA9PT0gbnVsbCB8fCBjYWNoZWRVaW50OE1lbW9yeTAuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjYWNoZWRVaW50OE1lbW9yeTAgPSBuZXcgVWludDhBcnJheSh3YXNtLm1lbW9yeS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkVWludDhNZW1vcnkwO1xufVxuXG5jb25zdCBjYWNoZWRUZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKTtcblxuY29uc3QgZW5jb2RlU3RyaW5nID0gKHR5cGVvZiBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGVJbnRvID09PSAnZnVuY3Rpb24nXG4gICAgPyBmdW5jdGlvbiAoYXJnLCB2aWV3KSB7XG4gICAgcmV0dXJuIGNhY2hlZFRleHRFbmNvZGVyLmVuY29kZUludG8oYXJnLCB2aWV3KTtcbn1cbiAgICA6IGZ1bmN0aW9uIChhcmcsIHZpZXcpIHtcbiAgICBjb25zdCBidWYgPSBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGUoYXJnKTtcbiAgICB2aWV3LnNldChidWYpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlYWQ6IGFyZy5sZW5ndGgsXG4gICAgICAgIHdyaXR0ZW46IGJ1Zi5sZW5ndGhcbiAgICB9O1xufSk7XG5cbmZ1bmN0aW9uIHBhc3NTdHJpbmdUb1dhc20wKGFyZywgbWFsbG9jLCByZWFsbG9jKSB7XG5cbiAgICBpZiAocmVhbGxvYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IGNhY2hlZFRleHRFbmNvZGVyLmVuY29kZShhcmcpO1xuICAgICAgICBjb25zdCBwdHIgPSBtYWxsb2MoYnVmLmxlbmd0aCk7XG4gICAgICAgIGdldFVpbnQ4TWVtb3J5MCgpLnN1YmFycmF5KHB0ciwgcHRyICsgYnVmLmxlbmd0aCkuc2V0KGJ1Zik7XG4gICAgICAgIFdBU01fVkVDVE9SX0xFTiA9IGJ1Zi5sZW5ndGg7XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IGFyZy5sZW5ndGg7XG4gICAgbGV0IHB0ciA9IG1hbGxvYyhsZW4pO1xuXG4gICAgY29uc3QgbWVtID0gZ2V0VWludDhNZW1vcnkwKCk7XG5cbiAgICBsZXQgb2Zmc2V0ID0gMDtcblxuICAgIGZvciAoOyBvZmZzZXQgPCBsZW47IG9mZnNldCsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBhcmcuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICBpZiAoY29kZSA+IDB4N0YpIGJyZWFrO1xuICAgICAgICBtZW1bcHRyICsgb2Zmc2V0XSA9IGNvZGU7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCAhPT0gbGVuKSB7XG4gICAgICAgIGlmIChvZmZzZXQgIT09IDApIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHB0ciA9IHJlYWxsb2MocHRyLCBsZW4sIGxlbiA9IG9mZnNldCArIGFyZy5sZW5ndGggKiAzKTtcbiAgICAgICAgY29uc3QgdmlldyA9IGdldFVpbnQ4TWVtb3J5MCgpLnN1YmFycmF5KHB0ciArIG9mZnNldCwgcHRyICsgbGVuKTtcbiAgICAgICAgY29uc3QgcmV0ID0gZW5jb2RlU3RyaW5nKGFyZywgdmlldyk7XG5cbiAgICAgICAgb2Zmc2V0ICs9IHJldC53cml0dGVuO1xuICAgIH1cblxuICAgIFdBU01fVkVDVE9SX0xFTiA9IG9mZnNldDtcbiAgICByZXR1cm4gcHRyO1xufVxuXG5mdW5jdGlvbiBpc0xpa2VOb25lKHgpIHtcbiAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkIHx8IHggPT09IG51bGw7XG59XG5cbmxldCBjYWNoZWRJbnQzMk1lbW9yeTAgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRJbnQzMk1lbW9yeTAoKSB7XG4gICAgaWYgKGNhY2hlZEludDMyTWVtb3J5MCA9PT0gbnVsbCB8fCBjYWNoZWRJbnQzMk1lbW9yeTAuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjYWNoZWRJbnQzMk1lbW9yeTAgPSBuZXcgSW50MzJBcnJheSh3YXNtLm1lbW9yeS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkSW50MzJNZW1vcnkwO1xufVxuXG5jb25zdCBjYWNoZWRUZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnLCB7IGlnbm9yZUJPTTogdHJ1ZSwgZmF0YWw6IHRydWUgfSk7XG5cbmNhY2hlZFRleHREZWNvZGVyLmRlY29kZSgpO1xuXG5mdW5jdGlvbiBnZXRTdHJpbmdGcm9tV2FzbTAocHRyLCBsZW4pIHtcbiAgICByZXR1cm4gY2FjaGVkVGV4dERlY29kZXIuZGVjb2RlKGdldFVpbnQ4TWVtb3J5MCgpLnN1YmFycmF5KHB0ciwgcHRyICsgbGVuKSk7XG59XG5cbmZ1bmN0aW9uIGFkZEhlYXBPYmplY3Qob2JqKSB7XG4gICAgaWYgKGhlYXBfbmV4dCA9PT0gaGVhcC5sZW5ndGgpIGhlYXAucHVzaChoZWFwLmxlbmd0aCArIDEpO1xuICAgIGNvbnN0IGlkeCA9IGhlYXBfbmV4dDtcbiAgICBoZWFwX25leHQgPSBoZWFwW2lkeF07XG5cbiAgICBoZWFwW2lkeF0gPSBvYmo7XG4gICAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZGVidWdTdHJpbmcodmFsKSB7XG4gICAgLy8gcHJpbWl0aXZlIHR5cGVzXG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWw7XG4gICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICBgJHt2YWx9YDtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGBcIiR7dmFsfVwiYDtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB2YWwuZGVzY3JpcHRpb247XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1N5bWJvbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYFN5bWJvbCgke2Rlc2NyaXB0aW9ufSlgO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHZhbC5uYW1lO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgJiYgbmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYEZ1bmN0aW9uKCR7bmFtZX0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnRnVuY3Rpb24nO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG9iamVjdHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHZhbC5sZW5ndGg7XG4gICAgICAgIGxldCBkZWJ1ZyA9ICdbJztcbiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRlYnVnICs9IGRlYnVnU3RyaW5nKHZhbFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZWJ1ZyArPSAnLCAnICsgZGVidWdTdHJpbmcodmFsW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1ZyArPSAnXSc7XG4gICAgICAgIHJldHVybiBkZWJ1ZztcbiAgICB9XG4gICAgLy8gVGVzdCBmb3IgYnVpbHQtaW5cbiAgICBjb25zdCBidWlsdEluTWF0Y2hlcyA9IC9cXFtvYmplY3QgKFteXFxdXSspXFxdLy5leGVjKHRvU3RyaW5nLmNhbGwodmFsKSk7XG4gICAgbGV0IGNsYXNzTmFtZTtcbiAgICBpZiAoYnVpbHRJbk1hdGNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjbGFzc05hbWUgPSBidWlsdEluTWF0Y2hlc1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYWlsZWQgdG8gbWF0Y2ggdGhlIHN0YW5kYXJkICdbb2JqZWN0IENsYXNzTmFtZV0nXG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCk7XG4gICAgfVxuICAgIGlmIChjbGFzc05hbWUgPT0gJ09iamVjdCcpIHtcbiAgICAgICAgLy8gd2UncmUgYSB1c2VyIGRlZmluZWQgY2xhc3Mgb3IgT2JqZWN0XG4gICAgICAgIC8vIEpTT04uc3RyaW5naWZ5IGF2b2lkcyBwcm9ibGVtcyB3aXRoIGN5Y2xlcywgYW5kIGlzIGdlbmVyYWxseSBtdWNoXG4gICAgICAgIC8vIGVhc2llciB0aGFuIGxvb3BpbmcgdGhyb3VnaCBvd25Qcm9wZXJ0aWVzIG9mIGB2YWxgLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICdPYmplY3QoJyArIEpTT04uc3RyaW5naWZ5KHZhbCkgKyAnKSc7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgIHJldHVybiAnT2JqZWN0JztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlcnJvcnNcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGAke3ZhbC5uYW1lfTogJHt2YWwubWVzc2FnZX1cXG4ke3ZhbC5zdGFja31gO1xuICAgIH1cbiAgICAvLyBUT0RPIHdlIGNvdWxkIHRlc3QgZm9yIG1vcmUgdGhpbmdzIGhlcmUsIGxpa2UgYFNldGBzIGFuZCBgTWFwYHMuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuY29uc3QgQ0xPU1VSRV9EVE9SUyA9IG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeShzdGF0ZSA9PiB7XG4gICAgd2FzbS5fX3diaW5kZ2VuX2V4cG9ydF8yLmdldChzdGF0ZS5kdG9yKShzdGF0ZS5hLCBzdGF0ZS5iKVxufSk7XG5cbmZ1bmN0aW9uIG1ha2VNdXRDbG9zdXJlKGFyZzAsIGFyZzEsIGR0b3IsIGYpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHsgYTogYXJnMCwgYjogYXJnMSwgY250OiAxLCBkdG9yIH07XG4gICAgY29uc3QgcmVhbCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIC8vIEZpcnN0IHVwIHdpdGggYSBjbG9zdXJlIHdlIGluY3JlbWVudCB0aGUgaW50ZXJuYWwgcmVmZXJlbmNlXG4gICAgICAgIC8vIGNvdW50LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgUnVzdCBjbG9zdXJlIGVudmlyb25tZW50IHdvbid0XG4gICAgICAgIC8vIGJlIGRlYWxsb2NhdGVkIHdoaWxlIHdlJ3JlIGludm9raW5nIGl0LlxuICAgICAgICBzdGF0ZS5jbnQrKztcbiAgICAgICAgY29uc3QgYSA9IHN0YXRlLmE7XG4gICAgICAgIHN0YXRlLmEgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGYoYSwgc3RhdGUuYiwgLi4uYXJncyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoLS1zdGF0ZS5jbnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB3YXNtLl9fd2JpbmRnZW5fZXhwb3J0XzIuZ2V0KHN0YXRlLmR0b3IpKGEsIHN0YXRlLmIpO1xuICAgICAgICAgICAgICAgIENMT1NVUkVfRFRPUlMudW5yZWdpc3RlcihzdGF0ZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuYSA9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlYWwub3JpZ2luYWwgPSBzdGF0ZTtcbiAgICBDTE9TVVJFX0RUT1JTLnJlZ2lzdGVyKHJlYWwsIHN0YXRlLCBzdGF0ZSk7XG4gICAgcmV0dXJuIHJlYWw7XG59XG5mdW5jdGlvbiBfX3diZ19hZGFwdGVyXzI2KGFyZzAsIGFyZzEpIHtcbiAgICB3YXNtLl9keW5fY29yZV9fb3BzX19mdW5jdGlvbl9fRm5NdXRfX19fX091dHB1dF9fX1JfYXNfd2FzbV9iaW5kZ2VuX19jbG9zdXJlX19XYXNtQ2xvc3VyZV9fX2Rlc2NyaWJlX19pbnZva2VfX2hhZDlkNWQzMGM4YjgzNWFmKGFyZzAsIGFyZzEpO1xufVxuXG5mdW5jdGlvbiBfX3diZ19hZGFwdGVyXzI5KGFyZzAsIGFyZzEsIGFyZzIpIHtcbiAgICB3YXNtLl9keW5fY29yZV9fb3BzX19mdW5jdGlvbl9fRm5NdXRfX0FfX19fT3V0cHV0X19fUl9hc193YXNtX2JpbmRnZW5fX2Nsb3N1cmVfX1dhc21DbG9zdXJlX19fZGVzY3JpYmVfX2ludm9rZV9faGJjMmYzZDU3NDAxNGU3NGQoYXJnMCwgYXJnMSwgYWRkSGVhcE9iamVjdChhcmcyKSk7XG59XG5cbi8qKlxuKiBJbml0aWFsaXplcyB0aGUgY29uc29sZSBlcnJvciBwYW5pYyBob29rIGZvciBiZXR0ZXIgcGFuaWMgbWVzc2FnZXMuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIHdhc20uc3RhcnQoKTtcbn1cblxuLyoqXG4qIFRoZSBXYXNtIGJpbmRpbmdzIGRvIG5vdCBzdXBwb3J0IGludGVybmFsIGxvZ2dpbmcgeWV0LlxuKlxuKiBDYWxsaW5nIHRoaXMgaXMgYSBuby1vcCwgb25seSBpbmNsdWRlZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBOb2RlLmpzIGJpbmRpbmdzIFR5cGVTY3JpcHQgZGVmaW5pdGlvbnMuXG4qIEBwYXJhbSB7YW55fSBfY29uZmlnXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRMb2dnZXIoX2NvbmZpZykge1xuICAgIHdhc20uaW5pdExvZ2dlcihhZGRIZWFwT2JqZWN0KF9jb25maWcpKTtcbn1cblxuLyoqXG4qIENyZWF0ZXMgYSBtZXNzYWdlIGhhbmRsZXIgd2l0aCB0aGUgZ2l2ZW4gY2xpZW50IG9wdGlvbnMuXG4qIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBjbGllbnRPcHRpb25zXG4qIEByZXR1cm5zIHtNZXNzYWdlSGFuZGxlcn1cbiovXG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZUhhbmRsZXJOZXcoY2xpZW50T3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJldHB0ciA9IHdhc20uX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcigtMTYpO1xuICAgICAgICB2YXIgcHRyMCA9IGlzTGlrZU5vbmUoY2xpZW50T3B0aW9ucykgPyAwIDogcGFzc1N0cmluZ1RvV2FzbTAoY2xpZW50T3B0aW9ucywgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICB2YXIgbGVuMCA9IFdBU01fVkVDVE9SX0xFTjtcbiAgICAgICAgd2FzbS5tZXNzYWdlSGFuZGxlck5ldyhyZXRwdHIsIHB0cjAsIGxlbjApO1xuICAgICAgICB2YXIgcjAgPSBnZXRJbnQzMk1lbW9yeTAoKVtyZXRwdHIgLyA0ICsgMF07XG4gICAgICAgIHZhciByMSA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgdmFyIHIyID0gZ2V0SW50MzJNZW1vcnkwKClbcmV0cHRyIC8gNCArIDJdO1xuICAgICAgICBpZiAocjIpIHtcbiAgICAgICAgICAgIHRocm93IHRha2VPYmplY3QocjEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNZXNzYWdlSGFuZGxlci5fX3dyYXAocjApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc20uX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcigxNik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2xhc3MoaW5zdGFuY2UsIGtsYXNzKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBrbGFzcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCBpbnN0YW5jZSBvZiAke2tsYXNzLm5hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5wdHI7XG59XG4vKipcbiogSGFuZGxlcyBhIG1lc3NhZ2UsIHJldHVybnMgdGhlIHJlc3BvbnNlIGFzIGEgSlNPTi1lbmNvZGVkIHN0cmluZy5cbipcbiogUmV0dXJucyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgaXRzZWxmIGlzIGFuIGVycm9yIG9yIHBhbmljLlxuKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuKiBAcGFyYW0ge01lc3NhZ2VIYW5kbGVyfSBtZXNzYWdlSGFuZGxlclxuKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTWVzc2FnZUFzeW5jKG1lc3NhZ2UsIG1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmV0cHRyID0gd2FzbS5fX3diaW5kZ2VuX2FkZF90b19zdGFja19wb2ludGVyKC0xNik7XG4gICAgICAgIGNvbnN0IHB0cjAgPSBwYXNzU3RyaW5nVG9XYXNtMChtZXNzYWdlLCB3YXNtLl9fd2JpbmRnZW5fbWFsbG9jLCB3YXNtLl9fd2JpbmRnZW5fcmVhbGxvYyk7XG4gICAgICAgIGNvbnN0IGxlbjAgPSBXQVNNX1ZFQ1RPUl9MRU47XG4gICAgICAgIF9hc3NlcnRDbGFzcyhtZXNzYWdlSGFuZGxlciwgTWVzc2FnZUhhbmRsZXIpO1xuICAgICAgICB3YXNtLnNlbmRNZXNzYWdlQXN5bmMocmV0cHRyLCBwdHIwLCBsZW4wLCBtZXNzYWdlSGFuZGxlci5wdHIpO1xuICAgICAgICB2YXIgcjAgPSBnZXRJbnQzMk1lbW9yeTAoKVtyZXRwdHIgLyA0ICsgMF07XG4gICAgICAgIHZhciByMSA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgdmFyIHIyID0gZ2V0SW50MzJNZW1vcnkwKClbcmV0cHRyIC8gNCArIDJdO1xuICAgICAgICBpZiAocjIpIHtcbiAgICAgICAgICAgIHRocm93IHRha2VPYmplY3QocjEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWtlT2JqZWN0KHIwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB3YXNtLl9fd2JpbmRnZW5fYWRkX3RvX3N0YWNrX3BvaW50ZXIoMTYpO1xuICAgIH1cbn1cblxubGV0IHN0YWNrX3BvaW50ZXIgPSAxMjg7XG5cbmZ1bmN0aW9uIGFkZEJvcnJvd2VkT2JqZWN0KG9iaikge1xuICAgIGlmIChzdGFja19wb2ludGVyID09IDEpIHRocm93IG5ldyBFcnJvcignb3V0IG9mIGpzIHN0YWNrJyk7XG4gICAgaGVhcFstLXN0YWNrX3BvaW50ZXJdID0gb2JqO1xuICAgIHJldHVybiBzdGFja19wb2ludGVyO1xufVxuLyoqXG4qIE1RVFQgaXMgbm90IHN1cHBvcnRlZCBmb3IgV2ViQXNzZW1ibHkgYmluZGluZ3MuXG4qXG4qIFRocm93cyBhbiBlcnJvciBpZiBjYWxsZWQsIG9ubHkgaW5jbHVkZWQgZm9yIGNvbXBhdGliaWxpdHlcbiogd2l0aCB0aGUgTm9kZS5qcyBiaW5kaW5ncyBUeXBlU2NyaXB0IGRlZmluaXRpb25zLlxuKiBAcGFyYW0ge3N0cmluZ1tdfSBfdG9waWNzXG4qIEBwYXJhbSB7RnVuY3Rpb259IF9jYWxsYmFja1xuKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4oX3RvcGljcywgX2NhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmV0cHRyID0gd2FzbS5fX3diaW5kZ2VuX2FkZF90b19zdGFja19wb2ludGVyKC0xNik7XG4gICAgICAgIHdhc20ubGlzdGVuKHJldHB0ciwgYWRkSGVhcE9iamVjdChfdG9waWNzKSwgYWRkQm9ycm93ZWRPYmplY3QoX2NhbGxiYWNrKSk7XG4gICAgICAgIHZhciByMCA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAwXTtcbiAgICAgICAgdmFyIHIxID0gZ2V0SW50MzJNZW1vcnkwKClbcmV0cHRyIC8gNCArIDFdO1xuICAgICAgICBpZiAocjEpIHtcbiAgICAgICAgICAgIHRocm93IHRha2VPYmplY3QocjApO1xuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2FkZF90b19zdGFja19wb2ludGVyKDE2KTtcbiAgICAgICAgaGVhcFtzdGFja19wb2ludGVyKytdID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZiwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2V4bl9zdG9yZShhZGRIZWFwT2JqZWN0KGUpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5VThGcm9tV2FzbTAocHRyLCBsZW4pIHtcbiAgICByZXR1cm4gZ2V0VWludDhNZW1vcnkwKCkuc3ViYXJyYXkocHRyIC8gMSwgcHRyIC8gMSArIGxlbik7XG59XG5mdW5jdGlvbiBfX3diZ19hZGFwdGVyXzEwNyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgd2FzbS53YXNtX2JpbmRnZW5fX2NvbnZlcnRfX2Nsb3N1cmVzX19pbnZva2UyX211dF9faDk5MTYxYjM2MWIyNmI0N2QoYXJnMCwgYXJnMSwgYWRkSGVhcE9iamVjdChhcmcyKSwgYWRkSGVhcE9iamVjdChhcmczKSk7XG59XG5cbmNvbnN0IE1lc3NhZ2VIYW5kbGVyRmluYWxpemF0aW9uID0gbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KHB0ciA9PiB3YXNtLl9fd2JnX21lc3NhZ2VoYW5kbGVyX2ZyZWUocHRyKSk7XG4vKipcbiogVGhlIENsaWVudCBtZXNzYWdlIGhhbmRsZXIuXG4qL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VIYW5kbGVyIHtcblxuICAgIHN0YXRpYyBfX3dyYXAocHRyKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUoTWVzc2FnZUhhbmRsZXIucHJvdG90eXBlKTtcbiAgICAgICAgb2JqLnB0ciA9IHB0cjtcbiAgICAgICAgTWVzc2FnZUhhbmRsZXJGaW5hbGl6YXRpb24ucmVnaXN0ZXIob2JqLCBvYmoucHRyLCBvYmopO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIF9fZGVzdHJveV9pbnRvX3JhdygpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5wdHI7XG4gICAgICAgIHRoaXMucHRyID0gMDtcbiAgICAgICAgTWVzc2FnZUhhbmRsZXJGaW5hbGl6YXRpb24udW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHB0cjtcbiAgICB9XG5cbiAgICBmcmVlKCkge1xuICAgICAgICBjb25zdCBwdHIgPSB0aGlzLl9fZGVzdHJveV9pbnRvX3JhdygpO1xuICAgICAgICB3YXNtLl9fd2JnX21lc3NhZ2VoYW5kbGVyX2ZyZWUocHRyKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWQobW9kdWxlLCBpbXBvcnRzKSB7XG4gICAgaWYgKHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGUgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgICBpZiAodHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhtb2R1bGUsIGltcG9ydHMpO1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZHVsZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgIT0gJ2FwcGxpY2F0aW9uL3dhc20nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ2AgZmFpbGVkIGJlY2F1c2UgeW91ciBzZXJ2ZXIgZG9lcyBub3Qgc2VydmUgd2FzbSB3aXRoIGBhcHBsaWNhdGlvbi93YXNtYCBNSU1FIHR5cGUuIEZhbGxpbmcgYmFjayB0byBgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVgIHdoaWNoIGlzIHNsb3dlci4gT3JpZ2luYWwgZXJyb3I6XFxuXCIsIGUpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBieXRlcyA9IGF3YWl0IG1vZHVsZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnl0ZXMsIGltcG9ydHMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShtb2R1bGUsIGltcG9ydHMpO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFdlYkFzc2VtYmx5Lkluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBpbnN0YW5jZSwgbW9kdWxlIH07XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW1wb3J0cygpIHtcbiAgICBjb25zdCBpbXBvcnRzID0ge307XG4gICAgaW1wb3J0cy53YmcgPSB7fTtcbiAgICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX29iamVjdF9kcm9wX3JlZiA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgdGFrZU9iamVjdChhcmcwKTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JpbmRnZW5fY2JfZHJvcCA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3Qgb2JqID0gdGFrZU9iamVjdChhcmcwKS5vcmlnaW5hbDtcbiAgICAgICAgaWYgKG9iai5jbnQtLSA9PSAxKSB7XG4gICAgICAgICAgICBvYmouYSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JpbmRnZW5fc3RyaW5nX2dldCA9IGZ1bmN0aW9uKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gZ2V0T2JqZWN0KGFyZzEpO1xuICAgICAgICBjb25zdCByZXQgPSB0eXBlb2Yob2JqKSA9PT0gJ3N0cmluZycgPyBvYmogOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBwdHIwID0gaXNMaWtlTm9uZShyZXQpID8gMCA6IHBhc3NTdHJpbmdUb1dhc20wKHJldCwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICB2YXIgbGVuMCA9IFdBU01fVkVDVE9SX0xFTjtcbiAgICAgICAgZ2V0SW50MzJNZW1vcnkwKClbYXJnMCAvIDQgKyAxXSA9IGxlbjA7XG4gICAgICAgIGdldEludDMyTWVtb3J5MCgpW2FyZzAgLyA0ICsgMF0gPSBwdHIwO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9zdHJpbmdfbmV3ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMCwgYXJnMSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19uZXdfYWJkYTc2ZTg4M2JhOGE1ZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCByZXQgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX3N0YWNrXzY1ODI3OWZlNDQ1NDFjZjYgPSBmdW5jdGlvbihhcmcwLCBhcmcxKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChhcmcxKS5zdGFjaztcbiAgICAgICAgY29uc3QgcHRyMCA9IHBhc3NTdHJpbmdUb1dhc20wKHJldCwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICBjb25zdCBsZW4wID0gV0FTTV9WRUNUT1JfTEVOO1xuICAgICAgICBnZXRJbnQzMk1lbW9yeTAoKVthcmcwIC8gNCArIDFdID0gbGVuMDtcbiAgICAgICAgZ2V0SW50MzJNZW1vcnkwKClbYXJnMCAvIDQgKyAwXSA9IHB0cjA7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19lcnJvcl9mODUxNjY3YWY3MWJjZmM2ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMCwgYXJnMSkpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgd2FzbS5fX3diaW5kZ2VuX2ZyZWUoYXJnMCwgYXJnMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2NsZWFyVGltZW91dF83Njg3N2RiYzAxMGU3ODZkID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBjbGVhclRpbWVvdXQodGFrZU9iamVjdChhcmcwKSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19zZXRUaW1lb3V0Xzc1Y2I5YjY5OTFhNDAzMWQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGZ1bmN0aW9uIChhcmcwLCBhcmcxKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHNldFRpbWVvdXQoZ2V0T2JqZWN0KGFyZzApLCBhcmcxKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9vYmplY3RfY2xvbmVfcmVmID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19mZXRjaF8zYTFiZTUxNzYwZTFmOGViID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBmZXRjaChnZXRPYmplY3QoYXJnMCkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfZmV0Y2hfNjYxZmZiYTJhNGYyNTE5YyA9IGZ1bmN0aW9uKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmZldGNoKGdldE9iamVjdChhcmcxKSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19pbnN0YW5jZW9mX1Jlc3BvbnNlX2ZiM2E0ZGY2NDhjMTg1OWIgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBnZXRPYmplY3QoYXJnMCkgaW5zdGFuY2VvZiBSZXNwb25zZTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXQgPSByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ191cmxfOGVjMjUzNGNkZmFjYjEwMyA9IGZ1bmN0aW9uKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzEpLnVybDtcbiAgICAgICAgY29uc3QgcHRyMCA9IHBhc3NTdHJpbmdUb1dhc20wKHJldCwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICBjb25zdCBsZW4wID0gV0FTTV9WRUNUT1JfTEVOO1xuICAgICAgICBnZXRJbnQzMk1lbW9yeTAoKVthcmcwIC8gNCArIDFdID0gbGVuMDtcbiAgICAgICAgZ2V0SW50MzJNZW1vcnkwKClbYXJnMCAvIDQgKyAwXSA9IHB0cjA7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19zdGF0dXNfZDQ4M2E0YWM4NDdmMzgwYSA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLnN0YXR1cztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2hlYWRlcnNfNjA5MzkyN2RjMzU5OTAzZSA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmhlYWRlcnM7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19hcnJheUJ1ZmZlcl9jYjg4NmUwNmE5ZTM2ZTRkID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfdGV4dF9mNjE0NjRkNzgxYjA5OWYwID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkudGV4dCgpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19ub3dfYzY0NGRiNTE5NGJlODQzNyA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLm5vdygpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfbmV3d2l0aHN0cmFuZGluaXRfYzQ1ZjBkYzZkYTI2ZmQwMyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEsIGFyZzIpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IFJlcXVlc3QoZ2V0U3RyaW5nRnJvbVdhc20wKGFyZzAsIGFyZzEpLCBnZXRPYmplY3QoYXJnMikpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19uZXdfZjFjM2E5YzI1MzNhNTViOCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCByZXQgPSBuZXcgSGVhZGVycygpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19hcHBlbmRfMWJlMWQ2NTFmOWVjZjJlYiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpIHtcbiAgICAgICAgZ2V0T2JqZWN0KGFyZzApLmFwcGVuZChnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMSwgYXJnMiksIGdldFN0cmluZ0Zyb21XYXNtMChhcmczLCBhcmc0KSk7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2NyeXB0b19lMWQ1M2ExZDczZmIxMGI4ID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkuY3J5cHRvO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9pc19vYmplY3QgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGdldE9iamVjdChhcmcwKTtcbiAgICAgICAgY29uc3QgcmV0ID0gdHlwZW9mKHZhbCkgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX3Byb2Nlc3NfMDM4YzI2YmY0MmIwOTNmOCA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLnByb2Nlc3M7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ192ZXJzaW9uc19hYjM3MjE4ZDJmMGIyNGE4ID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkudmVyc2lvbnM7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19ub2RlXzA4MGY0YjE5ZDE1YmMxZmUgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChhcmcwKS5ub2RlO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9pc19zdHJpbmcgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHR5cGVvZihnZXRPYmplY3QoYXJnMCkpID09PSAnc3RyaW5nJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX21zQ3J5cHRvXzZlN2QzZTFmOTI2MTBjYmIgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChhcmcwKS5tc0NyeXB0bztcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX3JlcXVpcmVfNzhhM2RjZmJkYmE5Y2JjZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCByZXQgPSBtb2R1bGUucmVxdWlyZTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9pc19mdW5jdGlvbiA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gdHlwZW9mKGdldE9iamVjdChhcmcwKSkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19nZXRSYW5kb21WYWx1ZXNfODA1ZjFjM2Q2NTk4OGE1YSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgZ2V0T2JqZWN0KGFyZzApLmdldFJhbmRvbVZhbHVlcyhnZXRPYmplY3QoYXJnMSkpO1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19yYW5kb21GaWxsU3luY182ODk0NTY0YzJjMzM0YzQyID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBnZXRPYmplY3QoYXJnMCkucmFuZG9tRmlsbFN5bmMoZ2V0QXJyYXlVOEZyb21XYXNtMChhcmcxLCBhcmcyKSk7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX25ld25vYXJnc18yYjhiNmJkNzc1M2M3NmJhID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICBjb25zdCByZXQgPSBuZXcgRnVuY3Rpb24oZ2V0U3RyaW5nRnJvbVdhc20wKGFyZzAsIGFyZzEpKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX25leHRfYjdkNTMwYzA0ZmQ4YjIxNyA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLm5leHQ7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19uZXh0Xzg4NTYwZWMwNmEwOTRkZWEgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGZ1bmN0aW9uIChhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChhcmcwKS5uZXh0KCk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2RvbmVfMWViZWMwM2JiZDkxOTg0MyA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmRvbmU7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ192YWx1ZV82YWM4ZGE1Y2M1YjNlZmRhID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkudmFsdWU7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19pdGVyYXRvcl81NWYxMTQ0NDYyMjFhYTVhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IFN5bWJvbC5pdGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2dldF9iYWY0ODU1ZjlhOTg2MTg2ID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCwgYXJnMSkge1xuICAgICAgICBjb25zdCByZXQgPSBSZWZsZWN0LmdldChnZXRPYmplY3QoYXJnMCksIGdldE9iamVjdChhcmcxKSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX2NhbGxfOTVkMWVhNDg4ZDAzZTRlOCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmNhbGwoZ2V0T2JqZWN0KGFyZzEpKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfbmV3X2Y5ODc2MzI2MzI4ZjQ1ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IE9iamVjdCgpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193Ymdfc2VsZl9lN2MxZjgyNzA1N2Y2NTg0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHNlbGYuc2VsZjtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193Ymdfd2luZG93X2EwOWVjNjY0ZTE0YjFiODEgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gd2luZG93LndpbmRvdztcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfZ2xvYmFsVGhpc184N2NiYjg1MDZmZWNmM2E5ID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdsb2JhbFRoaXMuZ2xvYmFsVGhpcztcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfZ2xvYmFsX2M4NWE5MjU5ZTYyMWYzZGIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2xvYmFsLmdsb2JhbDtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9LCBhcmd1bWVudHMpIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9pc191bmRlZmluZWQgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGdldE9iamVjdChhcmcwKSA9PT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfbmV3XzE1ZDM5NjZlOTk4MWExOTYgPSBmdW5jdGlvbihhcmcwLCBhcmcxKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IG5ldyBFcnJvcihnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMCwgYXJnMSkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfY2FsbF85NDk1ZGU2NmZkYmUwMTZiID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkuY2FsbChnZXRPYmplY3QoYXJnMSksIGdldE9iamVjdChhcmcyKSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX25vd185MzE2ODZiMTk1YTE0ZjlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19uZXdfOWQzYTljZTQyODJhMThhOCA9IGZ1bmN0aW9uKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBzdGF0ZTAgPSB7YTogYXJnMCwgYjogYXJnMX07XG4gICAgICAgICAgICB2YXIgY2IwID0gKGFyZzAsIGFyZzEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gc3RhdGUwLmE7XG4gICAgICAgICAgICAgICAgc3RhdGUwLmEgPSAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX3diZ19hZGFwdGVyXzEwNyhhLCBzdGF0ZTAuYiwgYXJnMCwgYXJnMSk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUwLmEgPSBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXQgPSBuZXcgUHJvbWlzZShjYjApO1xuICAgICAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN0YXRlMC5hID0gc3RhdGUwLmIgPSAwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19yZXNvbHZlX2ZkNDBmODU4ZDlkYjFhMDQgPSBmdW5jdGlvbihhcmcwKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IFByb21pc2UucmVzb2x2ZShnZXRPYmplY3QoYXJnMCkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfdGhlbl9lYzVkYjZkNTA5ZWI0NzVmID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkudGhlbihnZXRPYmplY3QoYXJnMSkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmdfdGhlbl9mNzUzNjIzMzE2ZTI4NzNhID0gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkudGhlbihnZXRPYmplY3QoYXJnMSksIGdldE9iamVjdChhcmcyKSk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19idWZmZXJfY2Y2NWMwN2RlMzRiOWEwOCA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmJ1ZmZlcjtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX25ld3dpdGhieXRlb2Zmc2V0YW5kbGVuZ3RoXzlmYjJmMTEzNTVlY2FkZjUgPSBmdW5jdGlvbihhcmcwLCBhcmcxLCBhcmcyKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IG5ldyBVaW50OEFycmF5KGdldE9iamVjdChhcmcwKSwgYXJnMSA+Pj4gMCwgYXJnMiA+Pj4gMCk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19uZXdfNTM3YjczNDFjZTkwYmIzMSA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IFVpbnQ4QXJyYXkoZ2V0T2JqZWN0KGFyZzApKTtcbiAgICAgICAgcmV0dXJuIGFkZEhlYXBPYmplY3QocmV0KTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX3NldF8xNzQ5OWU4YWE0MDAzZWJkID0gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBnZXRPYmplY3QoYXJnMCkuc2V0KGdldE9iamVjdChhcmcxKSwgYXJnMiA+Pj4gMCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19sZW5ndGhfMjdhMmFmZThhYjQyYjA5ZiA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0T2JqZWN0KGFyZzApLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX25ld3dpdGhsZW5ndGhfYjU2Yzg4MmI1NzgwNTczMiA9IGZ1bmN0aW9uKGFyZzApIHtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IFVpbnQ4QXJyYXkoYXJnMCA+Pj4gMCk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19zdWJhcnJheV83NTI2NjQ5YjkxYTI1MmE2ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBjb25zdCByZXQgPSBnZXRPYmplY3QoYXJnMCkuc3ViYXJyYXkoYXJnMSA+Pj4gMCwgYXJnMiA+Pj4gMCk7XG4gICAgICAgIHJldHVybiBhZGRIZWFwT2JqZWN0KHJldCk7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19oYXNfM2ZlZWE4OWQzNGJkN2FkNSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gUmVmbGVjdC5oYXMoZ2V0T2JqZWN0KGFyZzApLCBnZXRPYmplY3QoYXJnMSkpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diZ19zZXRfNmFhNDU4YTRlYmRiNjVjYiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZnVuY3Rpb24gKGFyZzAsIGFyZzEsIGFyZzIpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gUmVmbGVjdC5zZXQoZ2V0T2JqZWN0KGFyZzApLCBnZXRPYmplY3QoYXJnMSksIGdldE9iamVjdChhcmcyKSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSwgYXJndW1lbnRzKSB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JnX3N0cmluZ2lmeV8wMjlhOTc5ZGZiNzNhYTE3ID0gZnVuY3Rpb24oKSB7IHJldHVybiBoYW5kbGVFcnJvcihmdW5jdGlvbiAoYXJnMCkge1xuICAgICAgICBjb25zdCByZXQgPSBKU09OLnN0cmluZ2lmeShnZXRPYmplY3QoYXJnMCkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH0sIGFyZ3VtZW50cykgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX2RlYnVnX3N0cmluZyA9IGZ1bmN0aW9uKGFyZzAsIGFyZzEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gZGVidWdTdHJpbmcoZ2V0T2JqZWN0KGFyZzEpKTtcbiAgICAgICAgY29uc3QgcHRyMCA9IHBhc3NTdHJpbmdUb1dhc20wKHJldCwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICBjb25zdCBsZW4wID0gV0FTTV9WRUNUT1JfTEVOO1xuICAgICAgICBnZXRJbnQzMk1lbW9yeTAoKVthcmcwIC8gNCArIDFdID0gbGVuMDtcbiAgICAgICAgZ2V0SW50MzJNZW1vcnkwKClbYXJnMCAvIDQgKyAwXSA9IHB0cjA7XG4gICAgfTtcbiAgICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX3Rocm93ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0U3RyaW5nRnJvbVdhc20wKGFyZzAsIGFyZzEpKTtcbiAgICB9O1xuICAgIGltcG9ydHMud2JnLl9fd2JpbmRnZW5fbWVtb3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHdhc20ubWVtb3J5O1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9jbG9zdXJlX3dyYXBwZXIzMzExID0gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBjb25zdCByZXQgPSBtYWtlTXV0Q2xvc3VyZShhcmcwLCBhcmcxLCA3MTksIF9fd2JnX2FkYXB0ZXJfMjYpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG4gICAgaW1wb3J0cy53YmcuX193YmluZGdlbl9jbG9zdXJlX3dyYXBwZXIzNDI3ID0gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMikge1xuICAgICAgICBjb25zdCByZXQgPSBtYWtlTXV0Q2xvc3VyZShhcmcwLCBhcmcxLCA3OTIsIF9fd2JnX2FkYXB0ZXJfMjkpO1xuICAgICAgICByZXR1cm4gYWRkSGVhcE9iamVjdChyZXQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW1wb3J0cztcbn1cblxuZnVuY3Rpb24gaW5pdE1lbW9yeShpbXBvcnRzLCBtYXliZV9tZW1vcnkpIHtcblxufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZUluaXQoaW5zdGFuY2UsIG1vZHVsZSkge1xuICAgIHdhc20gPSBpbnN0YW5jZS5leHBvcnRzO1xuICAgIGluaXRXYXNtLl9fd2JpbmRnZW5fd2FzbV9tb2R1bGUgPSBtb2R1bGU7XG4gICAgY2FjaGVkSW50MzJNZW1vcnkwID0gbnVsbDtcbiAgICBjYWNoZWRVaW50OE1lbW9yeTAgPSBudWxsO1xuXG4gICAgd2FzbS5fX3diaW5kZ2VuX3N0YXJ0KCk7XG4gICAgcmV0dXJuIHdhc207XG59XG5cbmZ1bmN0aW9uIGluaXRTeW5jKG1vZHVsZSkge1xuICAgIGNvbnN0IGltcG9ydHMgPSBnZXRJbXBvcnRzKCk7XG5cbiAgICBpbml0TWVtb3J5KGltcG9ydHMpO1xuXG4gICAgaWYgKCEobW9kdWxlIGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuTW9kdWxlKSkge1xuICAgICAgICBtb2R1bGUgPSBuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG1vZHVsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobW9kdWxlLCBpbXBvcnRzKTtcblxuICAgIHJldHVybiBmaW5hbGl6ZUluaXQoaW5zdGFuY2UsIG1vZHVsZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRXYXNtKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gaW5wdXQgPSBuZXcgVVJMKCdjbGllbnRfd2FzbV9iZy53YXNtJywgaW1wb3J0Lm1ldGEudXJsKTtcbiAgICB9XG4gICAgY29uc3QgaW1wb3J0cyA9IGdldEltcG9ydHMoKTtcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8ICh0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHx8ICh0eXBlb2YgVVJMID09PSAnZnVuY3Rpb24nICYmIGlucHV0IGluc3RhbmNlb2YgVVJMKSkge1xuICAgICAgICBpbnB1dCA9IGZldGNoKGlucHV0KTtcbiAgICB9XG5cbiAgICBpbml0TWVtb3J5KGltcG9ydHMpO1xuXG4gICAgY29uc3QgeyBpbnN0YW5jZSwgbW9kdWxlIH0gPSBhd2FpdCBsb2FkKGF3YWl0IGlucHV0LCBpbXBvcnRzKTtcblxuICAgIHJldHVybiBmaW5hbGl6ZUluaXQoaW5zdGFuY2UsIG1vZHVsZSk7XG59XG5cbmV4cG9ydCB7IGluaXRTeW5jIH1cbmxldCBfX2luaXRpYWxpemVkSW90YVdhc20gPSBmYWxzZVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXQocGF0aCkge1xyXG4gICAgaWYgKF9faW5pdGlhbGl6ZWRJb3RhV2FzbSkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2FzbSlcclxuICAgIH1cclxuICAgIHJldHVybiBpbml0V2FzbShwYXRoIHx8ICdjbGllbnRfd2FzbV9iZy53YXNtJykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgX19pbml0aWFsaXplZElvdGFXYXNtID0gdHJ1ZVxyXG4gICAgICAgIHJldHVybiB3YXNtXHJcbiAgICB9KVxyXG59XHJcblxuIiwiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiBJT1RBIFN0aWZ0dW5nXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgc2VuZE1lc3NhZ2VBc3luYywgbWVzc2FnZUhhbmRsZXJOZXcsIGxpc3RlbiB9IGZyb20gJy4vYmluZGluZ3MnO1xuLyoqIFRoZSBNZXNzYWdlSGFuZGxlciB3aGljaCBzZW5kcyB0aGUgY29tbWFuZHMgdG8gdGhlIFJ1c3Qgc2lkZS4gKi9cbnZhciBNZXNzYWdlSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXNzYWdlSGFuZGxlcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXIgPSBtZXNzYWdlSGFuZGxlck5ldyhKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7XG4gICAgfVxuICAgIE1lc3NhZ2VIYW5kbGVyLnByb3RvdHlwZS5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2VuZE1lc3NhZ2VBc3luYyhKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgdGhpcy5tZXNzYWdlSGFuZGxlcildO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gTVFUVFxuICAgIE1lc3NhZ2VIYW5kbGVyLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAodG9waWNzLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGxpc3Rlbih0b3BpY3MsIGNhbGxiYWNrLCB0aGlzLm1lc3NhZ2VIYW5kbGVyKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVzc2FnZUhhbmRsZXI7XG59KCkpO1xuZXhwb3J0IHsgTWVzc2FnZUhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lc3NhZ2VIYW5kbGVyLmpzLm1hcCIsImV4cG9ydCB2YXIgSU9UQV9CRUNIMzJfSFJQID0gJ2lvdGEnO1xuZXhwb3J0IHZhciBJT1RBX1RFU1RORVRfQkVDSDMyX0hSUCA9ICdhdG9pJztcbmV4cG9ydCB2YXIgU0hJTU1FUl9CRUNIMzJfSFJQID0gJ3Ntcic7XG5leHBvcnQgdmFyIFNISU1NRVJfVEVTVE5FVF9CRUNIMzJfSFJQID0gJ3Jtcyc7XG4vKiogQklQNDQgQ29pbiBUeXBlcyBmb3IgSU9UQSBhbmQgU2hpbW1lci4gKi9cbmV4cG9ydCB2YXIgQ29pblR5cGU7XG4oZnVuY3Rpb24gKENvaW5UeXBlKSB7XG4gICAgQ29pblR5cGVbQ29pblR5cGVbXCJJT1RBXCJdID0gNDIxOF0gPSBcIklPVEFcIjtcbiAgICBDb2luVHlwZVtDb2luVHlwZVtcIlNoaW1tZXJcIl0gPSA0MjE5XSA9IFwiU2hpbW1lclwiO1xufSkoQ29pblR5cGUgfHwgKENvaW5UeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG4vLyBDb3B5cmlnaHQgMjAyMS0yMDIyIElPVEEgU3RpZnR1bmdcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5pbXBvcnQgeyBNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vTWVzc2FnZUhhbmRsZXInO1xuLyoqIFRoZSBDbGllbnQgdG8gaW50ZXJhY3Qgd2l0aCBub2Rlcy4gKi9cbnZhciBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2xpZW50KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlSGFuZGxlciA9IG5ldyBNZXNzYWdlSGFuZGxlcihvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbm9kZSBpbmZvcm1hdGlvbiB0b2dldGhlciB3aXRoIHRoZSB1cmwgb2YgdGhlIHVzZWQgbm9kZVxuICAgICAqIEByZXR1cm5zIHsgUHJvbWlzZTxJTm9kZUluZm9XcmFwcGVyPiB9LlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0SW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0SW5mbydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV0d29yayByZWxhdGVkIGluZm9ybWF0aW9uIHN1Y2ggYXMgbmV0d29ya19pZCBhbmQgbWluX3Bvd19zY29yZVxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0TmV0d29ya0luZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldE5ldHdvcmtJbmZvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogRmV0Y2ggYmFzaWMgb3V0cHV0IElEcyBiYXNlZCBvbiBxdWVyeSBwYXJhbWV0ZXJzICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5iYXNpY091dHB1dElkcyA9IGZ1bmN0aW9uIChxdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYmFzaWNPdXRwdXRJZHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzOiBxdWVyeVBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBHZXQgb3V0cHV0IGZyb20gYSBrbm93biBvdXRwdXRJRCAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0T3V0cHV0ID0gZnVuY3Rpb24gKG91dHB1dElkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldE91dHB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRJZDogb3V0cHV0SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBGZXRjaCBPdXRwdXRSZXNwb25zZSBmcm9tIHByb3ZpZGVkIE91dHB1dElkcyAocmVxdWVzdHMgYXJlIHNlbnQgaW4gcGFyYWxsZWwpICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRPdXRwdXRzID0gZnVuY3Rpb24gKG91dHB1dElkcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRPdXRwdXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dElkczogb3V0cHV0SWRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBuZXcgbW5lbW9uaWMuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZW5lcmF0ZU1uZW1vbmljID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZW5lcmF0ZU1uZW1vbmljJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgaGV4IGVuY29kZWQgc2VlZCBmb3IgYSBtbmVtb25pYy5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLm1uZW1vbmljVG9IZXhTZWVkID0gZnVuY3Rpb24gKG1uZW1vbmljKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ21uZW1vbmljVG9IZXhTZWVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1uZW1vbmljOiBtbmVtb25pY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGFsaWFzIGlkIGZvciB0aGUgZ2l2ZW4gYWxpYXMgb3V0cHV0IGlkLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuY29tcHV0ZUFsaWFzSWQgPSBmdW5jdGlvbiAob3V0cHV0SWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY29tcHV0ZUFsaWFzSWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0SWQ6IG91dHB1dElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgTkZUIGlkIGZvciB0aGUgZ2l2ZW4gTkZUIG91dHB1dCBpZC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmNvbXB1dGVOZnRJZCA9IGZ1bmN0aW9uIChvdXRwdXRJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjb21wdXRlTmZ0SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0SWQ6IG91dHB1dElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgZm91bmRyeSBpZC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmNvbXB1dGVGb3VuZHJ5SWQgPSBmdW5jdGlvbiAoYWxpYXNBZGRyZXNzLCBzZXJpYWxOdW1iZXIsIHRva2VuU2NoZW1lS2luZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjb21wdXRlRm91bmRyeUlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzQWRkcmVzczogYWxpYXNBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxOdW1iZXI6IHNlcmlhbE51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5TY2hlbWVLaW5kOiB0b2tlblNjaGVtZUtpbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBHZW5lcmF0ZSBhZGRyZXNzZXMgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdlbmVyYXRlQWRkcmVzc2VzID0gZnVuY3Rpb24gKHNlY3JldE1hbmFnZXIsIGdlbmVyYXRlQWRkcmVzc2VzT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZW5lcmF0ZUFkZHJlc3NlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRNYW5hZ2VyOiBzZWNyZXRNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBnZW5lcmF0ZUFkZHJlc3Nlc09wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBCdWlsZCBhbmQgcG9zdCBhIGJsb2NrICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5idWlsZEFuZFBvc3RCbG9jayA9IGZ1bmN0aW9uIChzZWNyZXRNYW5hZ2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2J1aWxkQW5kUG9zdEJsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldE1hbmFnZXI6IHNlY3JldE1hbmFnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGlwcyB0aGF0IGFyZSBpZGVhbCBmb3IgYXR0YWNoaW5nIGEgYmxvY2suXG4gICAgICogVGhlIHRpcHMgY2FuIGJlIGNvbnNpZGVyZWQgYXMgbm9uLWxhenkgYW5kIGFyZSB0aGVyZWZvcmUgaWRlYWwgZm9yIGF0dGFjaGluZyBhIGJsb2NrLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0VGlwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0VGlwcydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUG9zdCBibG9jayBpbiBKU09OIGZvcm1hdCwgcmV0dXJucyB0aGUgYmxvY2sgSUQuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5wb3N0QmxvY2sgPSBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncG9zdEJsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrOiBibG9ja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGJsb2NrIGFzIEpTT04uXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRCbG9jayA9IGZ1bmN0aW9uIChibG9ja0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldEJsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQ6IGJsb2NrSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBibG9jayBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldEJsb2NrTWV0YWRhdGEgPSBmdW5jdGlvbiAoYmxvY2tJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRCbG9ja01ldGFkYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQ6IGJsb2NrSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZpbmQgaW5wdXRzIGZyb20gYWRkcmVzc2VzIGZvciBhIHByb3ZpZGVkIGFtb3VudCAodXNlZnVsIGZvciBvZmZsaW5lIHNpZ25pbmcpXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5maW5kSW5wdXRzID0gZnVuY3Rpb24gKGFkZHJlc3NlcywgYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2ZpbmRJbnB1dHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzOiBhZGRyZXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogYW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCBvdXRwdXRzIGJhc2VkIG9uIHRoZSByZXF1ZXN0cyBjcml0ZXJpYS4gVGhpcyBtZXRob2Qgd2lsbCB0cnkgdG8gcXVlcnkgbXVsdGlwbGUgbm9kZXMgaWZcbiAgICAgKiB0aGUgcmVxdWVzdCBhbW91bnQgZXhjZWVkcyBpbmRpdmlkdWFsIG5vZGUgbGltaXQuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5maW5kT3V0cHV0cyA9IGZ1bmN0aW9uIChvdXRwdXRJZHMsIGFkZHJlc3Nlcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmaW5kT3V0cHV0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRJZHM6IG91dHB1dElkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzOiBhZGRyZXNzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RhdHVzIG9mIGEgTGVkZ2VyIE5hbm9cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldExlZGdlck5hbm9TdGF0dXMgPSBmdW5jdGlvbiAoaXNTaW11bGF0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0TGVkZ2VyTmFub1N0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NpbXVsYXRvcjogaXNTaW11bGF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByZXBhcmUgYSB0cmFuc2FjdGlvbiBmb3Igc2lnbmluZ1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucHJlcGFyZVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHNlY3JldE1hbmFnZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJlcGFyZVRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldE1hbmFnZXI6IHNlY3JldE1hbmFnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3JlIGEgbW5lbW9uaWMgaW4gdGhlIFN0cm9uZ2hvbGQgdmF1bHRcbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLnN0b3JlTW5lbW9uaWMgPSBmdW5jdGlvbiAoc2VjcmV0TWFuYWdlciwgbW5lbW9uaWMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc3RvcmVNbmVtb25pYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRNYW5hZ2VyOiBzZWNyZXRNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbmVtb25pYzogbW5lbW9uaWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNpZ24gYSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuc2lnblRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHNlY3JldE1hbmFnZXIsIHByZXBhcmVkVHJhbnNhY3Rpb25EYXRhKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3NpZ25UcmFuc2FjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRNYW5hZ2VyOiBzZWNyZXRNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwYXJlZFRyYW5zYWN0aW9uRGF0YTogcHJlcGFyZWRUcmFuc2FjdGlvbkRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNpZ25hdHVyZSB1bmxvY2sgdXNpbmcgdGhlIHByb3ZpZGVkIGBzZWNyZXRNYW5hZ2VyYC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLnNpZ25hdHVyZVVubG9jayA9IGZ1bmN0aW9uIChzZWNyZXRNYW5hZ2VyLCBpbnB1dFNpZ25pbmdEYXRhLCBcbiAgICAvLyBVc2VzIGBBcnJheTxudW1iZXI+YCBpbnN0ZWFkIG9mIGBVaW50OEFycmF5YCBiZWNhdXNlIHRoZSBsYXR0ZXIgc2VyaWFsaXplc1xuICAgIC8vIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiBhbiBhcnJheSwgd2hpY2ggcmVzdWx0cyBpbiBlcnJvcnMgd2l0aCBzZXJkZS5cbiAgICB0cmFuc2FjdGlvbkVzc2VuY2VIYXNoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3NpZ25hdHVyZVVubG9jaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRNYW5hZ2VyOiBzZWNyZXRNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFNpZ25pbmdEYXRhOiBpbnB1dFNpZ25pbmdEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkVzc2VuY2VIYXNoOiB0cmFuc2FjdGlvbkVzc2VuY2VIYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5kZXJEYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1Ym1pdCBhIHBheWxvYWQgaW4gYSBibG9ja1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucG9zdEJsb2NrUGF5bG9hZCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Bvc3RCbG9ja1BheWxvYWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHZhbGlkIEFkZHJlc3MgcGFyc2VkIGZyb20gYSBTdHJpbmcuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5wYXJzZUJlY2gzMkFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwYXJzZUJlY2gzMkFkZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJsb2NrIElEIChCbGFrZTJiMjU2IGhhc2ggb2YgdGhlIGJsb2NrIGJ5dGVzKVxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuYmxvY2tJZCA9IGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdibG9ja0lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrOiBibG9ja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgbm9kZSBjYW5kaWRhdGUgZnJvbSB0aGUgaGVhbHRoeSBub2RlIHBvb2wuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXROb2RlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5ldHdvcmsgaWQgb2YgdGhlIG5vZGUgd2UncmUgY29ubmVjdGluZyB0by5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldE5ldHdvcmtJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0TmV0d29ya0lkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBiZWNoMzJfaHJwLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0QmVjaDMySHJwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRCZWNoMzJIcnAnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1pbiBQb1cgc2NvcmUuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRNaW5Qb3dTY29yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0TWluUG93U2NvcmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRpcHMgaW50ZXJ2YWwuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRUaXBzSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldFRpcHNJbnRlcnZhbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdG9rZW4gc3VwcGx5LlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0VG9rZW5TdXBwbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRQcm90b2NvbFBhcmFtZXRlcnMoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYS5zZW50KCkpLnRva2VuU3VwcGx5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm90b2NvbCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0UHJvdG9jb2xQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRQcm90b2NvbFBhcmFtZXRlcnMnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgbG9jYWwgcG93IHNob3VsZCBiZSB1c2VkIG9yIG5vdC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldExvY2FsUG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRMb2NhbFBvdydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGZhbGxiYWNrIHRvIGxvY2FsIHByb29mIG9mIHdvcmsgdGltZW91dC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldEZhbGxiYWNrVG9Mb2NhbFBvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0RmFsbGJhY2tUb0xvY2FsUG93J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgaGVhbHRoIG9mIG5vZGUgYnkgaW5wdXQgdXJsLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0SGVhbHRoID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRIZWFsdGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBpbmZvIG9mIG5vZGUgd2l0aCBpbnB1dCB1cmwuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXROb2RlSW5mbyA9IGZ1bmN0aW9uICh1cmwsIGF1dGgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0Tm9kZUluZm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGg6IGF1dGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBwZWVycy5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldFBlZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRQZWVycydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUG9zdCBibG9jayBhcyByYXcgYnl0ZXMsIHJldHVybnMgdGhlIGJsb2NrIElELlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucG9zdEJsb2NrUmF3ID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Bvc3RCbG9ja1JhdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jazogYmxvY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBibG9jayBhcyByYXcgYnl0ZXMuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRCbG9ja1JhdyA9IGZ1bmN0aW9uIChibG9ja0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldEJsb2NrUmF3JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQ6IGJsb2NrSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvb2sgdXAgYSBtaWxlc3RvbmUgYnkgYSBnaXZlbiBtaWxlc3RvbmUgaW5kZXguXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRNaWxlc3RvbmVCeUlkID0gZnVuY3Rpb24gKG1pbGVzdG9uZUlkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldE1pbGVzdG9uZUJ5SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlsZXN0b25lSWQ6IG1pbGVzdG9uZUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBVVFhPIGNoYW5nZXMgdGhhdCBoYXBwZW5lZCBhdCBhIHNwZWNpZmljIG1pbGVzdG9uZS5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldFV0eG9DaGFuZ2VzQnlJZCA9IGZ1bmN0aW9uIChtaWxlc3RvbmVJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRVdHhvQ2hhbmdlc0J5SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlsZXN0b25lSWQ6IG1pbGVzdG9uZUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMb29rIHVwIGEgbWlsZXN0b25lIGJ5IGEgZ2l2ZW4gbWlsZXN0b25lIGluZGV4LlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0TWlsZXN0b25lQnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRNaWxlc3RvbmVCeUluZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgVVRYTyBjaGFuZ2VzIHRoYXQgaGFwcGVuZWQgYXQgYSBzcGVjaWZpYyBtaWxlc3RvbmUuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRVdHhvQ2hhbmdlc0J5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0VXR4b0NoYW5nZXNCeUluZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHJlY2VpcHRzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0UmVjZWlwdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dldFJlY2VpcHRzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlY2VpcHRzIGJ5IHRoZSBnaXZlbiBtaWxlc3RvbmUgaW5kZXguXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRSZWNlaXB0c01pZ3JhdGVkQXQgPSBmdW5jdGlvbiAobWlsZXN0b25lSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0UmVjZWlwdHNNaWdyYXRlZEF0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbGVzdG9uZUluZGV4OiBtaWxlc3RvbmVJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0cmVhc3VyeSBvdXRwdXQuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRUcmVhc3VyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2V0VHJlYXN1cnknXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGluY2x1ZGVkIGJsb2NrIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmdldEluY2x1ZGVkQmxvY2sgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25JZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRJbmNsdWRlZEJsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWQ6IHRyYW5zYWN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1ldGFkYXRhIG9mIHRoZSBpbmNsdWRlZCBibG9jayBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRJbmNsdWRlZEJsb2NrTWV0YWRhdGEgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25JZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnZXRJbmNsdWRlZEJsb2NrTWV0YWRhdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JZDogdHJhbnNhY3Rpb25JZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBiZWNoMzIgdG8gaGV4LlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuYmVjaDMyVG9IZXggPSBmdW5jdGlvbiAoYmVjaDMyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2JlY2gzMlRvSGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlY2gzMjogYmVjaDMyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGEgaGV4IGVuY29kZWQgYWRkcmVzcyB0byBhIGJlY2gzMiBlbmNvZGVkIGFkZHJlc3MuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5oZXhUb0JlY2gzMiA9IGZ1bmN0aW9uIChoZXgsIGJlY2gzMkhycCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdoZXhUb0JlY2gzMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZXg6IGhleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjaDMySHJwOiBiZWNoMzJIcnBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYW4gYWxpYXMgaWQgdG8gYSBiZWNoMzIgZW5jb2RlZCBhZGRyZXNzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuYWxpYXNJZFRvQmVjaDMyID0gZnVuY3Rpb24gKGFsaWFzSWQsIGJlY2gzMkhycCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhbGlhc0lkVG9CZWNoMzInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXNJZDogYWxpYXNJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjaDMySHJwOiBiZWNoMzJIcnBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYW4gbmZ0IGlkIHRvIGEgYmVjaDMyIGVuY29kZWQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLm5mdElkVG9CZWNoMzIgPSBmdW5jdGlvbiAobmZ0SWQsIGJlY2gzMkhycCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICduZnRJZFRvQmVjaDMyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5mdElkOiBuZnRJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjaDMySHJwOiBiZWNoMzJIcnBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYSBoZXggZW5jb2RlZCBwdWJsaWMga2V5IHRvIGEgYmVjaDMyIGVuY29kZWQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmhleFB1YmxpY0tleVRvQmVjaDMyQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXgsIGJlY2gzMkhycCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdoZXhQdWJsaWNLZXlUb0JlY2gzMkFkZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4OiBoZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlY2gzMkhycDogYmVjaDMySHJwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBTdHJpbmcgaXMgYSB2YWxpZCBiZWNoMzIgZW5jb2RlZCBhZGRyZXNzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuaXNBZGRyZXNzVmFsaWQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpc0FkZHJlc3NWYWxpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGZXRjaCBhbGlhcyBvdXRwdXQgSURzXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5hbGlhc091dHB1dElkcyA9IGZ1bmN0aW9uIChxdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWxpYXNPdXRwdXRJZHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzOiBxdWVyeVBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZldGNoIGFsaWFzIG91dHB1dCBJRFxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuYWxpYXNPdXRwdXRJZCA9IGZ1bmN0aW9uIChhbGlhc0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FsaWFzT3V0cHV0SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXNJZDogYWxpYXNJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmV0Y2ggTkZUIG91dHB1dCBJRHNcbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLm5mdE91dHB1dElkcyA9IGZ1bmN0aW9uIChxdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbmZ0T3V0cHV0SWRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyczogcXVlcnlQYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGZXRjaCBORlQgb3V0cHV0IElEXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5uZnRPdXRwdXRJZCA9IGZ1bmN0aW9uIChuZnRJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICduZnRPdXRwdXRJZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZnRJZDogbmZ0SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZldGNoIEZvdW5kcnkgT3V0cHV0IElEc1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZm91bmRyeU91dHB1dElkcyA9IGZ1bmN0aW9uIChxdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZm91bmRyeU91dHB1dElkcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnM6IHF1ZXJ5UGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmV0Y2ggRm91bmRyeSBPdXRwdXQgSURcbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmZvdW5kcnlPdXRwdXRJZCA9IGZ1bmN0aW9uIChmb3VuZHJ5SWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZm91bmRyeU91dHB1dElkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kcnlJZDogZm91bmRyeUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcnkgdG8gZ2V0IE91dHB1dFJlc3BvbnNlIGZyb20gcHJvdmlkZWQgT3V0cHV0SWRzIChyZXF1ZXN0cyBhcmUgc2VudFxuICAgICAqIGluIHBhcmFsbGVsIGFuZCBlcnJvcnMgYXJlIGlnbm9yZWQsIGNhbiBiZSB1c2VmdWwgZm9yIHNwZW50IG91dHB1dHMpXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS50cnlHZXRPdXRwdXRzID0gZnVuY3Rpb24gKG91dHB1dElkcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0cnlHZXRPdXRwdXRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dElkczogb3V0cHV0SWRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCBibG9ja3MgYnkgcHJvdmlkZWQgYmxvY2sgSURzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuZmluZEJsb2NrcyA9IGZ1bmN0aW9uIChibG9ja0lkcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmaW5kQmxvY2tzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWRzOiBibG9ja0lkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmllcyAocHJvbW90ZXMgb3IgcmVhdHRhY2hlcykgYSBibG9jayBmb3IgcHJvdmlkZWQgYmxvY2sgaWQuIEJsb2NrIHNob3VsZCBiZVxuICAgICAqIHJldHJpZWQgb25seSBpZiB0aGV5IGFyZSB2YWxpZCBhbmQgaGF2ZW4ndCBiZWVuIGNvbmZpcm1lZCBmb3IgYSB3aGlsZS5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLnJldHJ5ID0gZnVuY3Rpb24gKGJsb2NrSWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmV0cnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tJZDogYmxvY2tJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmllcyAocHJvbW90ZXMgb3IgcmVhdHRhY2hlcykgYSBibG9jayBmb3IgcHJvdmlkZWQgYmxvY2sgaWQgdW50aWwgaXQncyBpbmNsdWRlZCAocmVmZXJlbmNlZCBieSBhXG4gICAgICogbWlsZXN0b25lKS4gRGVmYXVsdCBpbnRlcnZhbCBpcyA1IHNlY29uZHMgYW5kIG1heCBhdHRlbXB0cyBpcyA0MC4gUmV0dXJucyB0aGUgaW5jbHVkZWQgYmxvY2sgYXQgZmlyc3RcbiAgICAgKiBwb3NpdGlvbiBhbmQgYWRkaXRpb25hbCByZWF0dGFjaGVkIGJsb2Nrc1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucmV0cnlVbnRpbEluY2x1ZGVkID0gZnVuY3Rpb24gKGJsb2NrSWQsIGludGVydmFsLCBtYXhBdHRlbXB0cykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZXRyeVVudGlsSW5jbHVkZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tJZDogYmxvY2tJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhBdHRlbXB0czogbWF4QXR0ZW1wdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIGNvbnNvbGlkYXRlIGFsbCBmdW5kcyBmcm9tIGEgcmFuZ2Ugb2YgYWRkcmVzc2VzIHRvIHRoZSBhZGRyZXNzIHdpdGggdGhlIGxvd2VzdCBpbmRleCBpbiB0aGF0IHJhbmdlXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyB0byB3aGljaCB0aGUgZnVuZHMgZ290IGNvbnNvbGlkYXRlZCwgaWYgYW55IHdlcmUgYXZhaWxhYmxlXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jb25zb2xpZGF0ZUZ1bmRzID0gZnVuY3Rpb24gKHNlY3JldE1hbmFnZXIsIGdlbmVyYXRlQWRkcmVzc2VzT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjb25zb2xpZGF0ZUZ1bmRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldE1hbmFnZXI6IHNlY3JldE1hbmFnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlQWRkcmVzc2VzT3B0aW9uczogZ2VuZXJhdGVBZGRyZXNzZXNPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWF0dGFjaGVzIGJsb2NrcyBmb3IgcHJvdmlkZWQgYmxvY2sgaWQuIEJsb2NrcyBjYW4gYmUgcmVhdHRhY2hlZCBvbmx5IGlmIHRoZXkgYXJlIHZhbGlkIGFuZCBoYXZlbid0IGJlZW5cbiAgICAgKiBjb25maXJtZWQgZm9yIGEgd2hpbGUuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZWF0dGFjaCA9IGZ1bmN0aW9uIChibG9ja0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3JlYXR0YWNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQ6IGJsb2NrSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlYXR0YWNoIGEgYmxvY2sgd2l0aG91dCBjaGVja2luZyBpZiBpdCBzaG91bGQgYmUgcmVhdHRhY2hlZFxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucmVhdHRhY2hVbmNoZWNrZWQgPSBmdW5jdGlvbiAoYmxvY2tJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZWF0dGFjaFVuY2hlY2tlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0lkOiBibG9ja0lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9tb3RlcyBhIGJsb2NrLiBUaGUgbWV0aG9kIHNob3VsZCB2YWxpZGF0ZSBpZiBhIHByb21vdGlvbiBpcyBuZWNlc3NhcnkgdGhyb3VnaCBnZXRfYmxvY2suIElmIG5vdCwgdGhlXG4gICAgICogbWV0aG9kIHNob3VsZCBlcnJvciBvdXQgYW5kIHNob3VsZCBub3QgYWxsb3cgdW5uZWNlc3NhcnkgcHJvbW90aW9ucy5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLnByb21vdGUgPSBmdW5jdGlvbiAoYmxvY2tJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9tb3RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQ6IGJsb2NrSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByb21vdGUgYSBibG9jayB3aXRob3V0IGNoZWNraW5nIGlmIGl0IHNob3VsZCBiZSBwcm9tb3RlZFxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUucHJvbW90ZVVuY2hlY2tlZCA9IGZ1bmN0aW9uIChibG9ja0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb21vdGVVbmNoZWNrZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tJZDogYmxvY2tJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5oZWFsdGh5IG5vZGVzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUudW5oZWFsdGh5Tm9kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3VuaGVhbHRoeU5vZGVzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlKS5wYXlsb2FkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCdWlsZCBhIEJhc2ljIE91dHB1dC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmJ1aWxkQmFzaWNPdXRwdXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdidWlsZEJhc2ljT3V0cHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJ1aWxkIGFuIEFsaWFzIE91dHB1dC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmJ1aWxkQWxpYXNPdXRwdXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdidWlsZEFsaWFzT3V0cHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UpLnBheWxvYWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgRm91bmRyeSBPdXRwdXQuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5idWlsZEZvdW5kcnlPdXRwdXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdidWlsZEZvdW5kcnlPdXRwdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnVpbGQgYW4gTmZ0IE91dHB1dC5cbiAgICAgKi9cbiAgICBDbGllbnQucHJvdG90eXBlLmJ1aWxkTmZ0T3V0cHV0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYnVpbGROZnRPdXRwdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgSlNPTi5wYXJzZShyZXNwb25zZSkucGF5bG9hZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTGlzdGVuIHRvIE1RVFQgdG9waWNzLlxuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHRvcGljcywgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLmxpc3Rlbih0b3BpY3MsIGNhbGxiYWNrKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wIGxpc3RlbmluZyBmb3IgcHJvdmlkZWQgTVFUVCB0b3BpY3MuXG4gICAgICovXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jbGVhckxpc3RlbmVycyA9IGZ1bmN0aW9uICh0b3BpY3MpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY2xlYXJMaXN0ZW5lcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9waWNzOiB0b3BpY3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IENsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpZW50LmpzLm1hcCIsIi8vIENvcHlyaWdodCAyMDIxLTIwMjIgSU9UQSBTdGlmdHVuZ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbmltcG9ydCB7IGluaXRMb2dnZXIgYXMgaW5pdExvZ2dlckJpbmRpbmcgfSBmcm9tICcuL2JpbmRpbmdzJztcbnZhciBkZWZhdWx0TG9nZ2VyQ29uZmlnID0ge1xuICAgIGNvbG9yRW5hYmxlZDogdHJ1ZSxcbiAgICBuYW1lOiAnLi9jbGllbnQubG9nJyxcbiAgICBsZXZlbEZpbHRlcjogJ2RlYnVnJ1xufTtcbi8qKiBJbml0aWFsaXplIGxvZ2dlciwgaWYgbm8gYXJndW1lbnRzIGFyZSBwcm92aWRlZCBhIGRlZmF1bHQgY29uZmlnIHdpbGwgYmUgdXNlZC4gKi9cbmV4cG9ydCB2YXIgaW5pdExvZ2dlciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0gZGVmYXVsdExvZ2dlckNvbmZpZzsgfVxuICAgIHJldHVybiBpbml0TG9nZ2VyQmluZGluZyhKU09OLnN0cmluZ2lmeShjb25maWcpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIiwiLyoqIFRoZSBMZWRnZXIgRGV2aWNlIFR5cGUgKi9cbmV4cG9ydCB2YXIgTGVkZ2VyRGV2aWNlVHlwZTtcbihmdW5jdGlvbiAoTGVkZ2VyRGV2aWNlVHlwZSkge1xuICAgIExlZGdlckRldmljZVR5cGVbXCJMZWRnZXJOYW5vU1wiXSA9IFwibGVkZ2VyTmFub1NcIjtcbiAgICBMZWRnZXJEZXZpY2VUeXBlW1wiTGVkZ2VyTmFub1hcIl0gPSBcImxlZGdlck5hbm9YXCI7XG4gICAgTGVkZ2VyRGV2aWNlVHlwZVtcIkxlZGdlck5hbm9TUGx1c1wiXSA9IFwibGVkZ2VyTmFub1NQbHVzXCI7XG59KShMZWRnZXJEZXZpY2VUeXBlIHx8IChMZWRnZXJEZXZpY2VUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlZGdlck5hbm9TdGF0dXMuanMubWFwIiwiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiBJT1RBIFN0aWZ0dW5nXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLyoqXG4gKiBOZXR3b3JrIHR5cGVzLlxuICovXG5leHBvcnQgdmFyIE5ldHdvcms7XG4oZnVuY3Rpb24gKE5ldHdvcmspIHtcbiAgICBOZXR3b3JrW05ldHdvcmtbXCJNYWlubmV0XCJdID0gMF0gPSBcIk1haW5uZXRcIjtcbiAgICBOZXR3b3JrW05ldHdvcmtbXCJUZXN0bmV0XCJdID0gMV0gPSBcIlRlc3RuZXRcIjtcbn0pKE5ldHdvcmsgfHwgKE5ldHdvcmsgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29yay5qcy5tYXAiLCJpbXBvcnQgQmlnSW50ZWdlciBmcm9tICdiaWctaW50ZWdlcic7XG5cbmV4cG9ydCBjb25zdCBFWFRFUk5BTExZX09XTkVEX0FDQ09VTlQgPSAwO1xuZXhwb3J0IGNvbnN0IEFDQ09VTlRTX0NPTlRSQUNUID0gMHgzYzRiNWUwMjtcbmV4cG9ydCBjb25zdCBUUkFOU0ZFUl9BTExPV0FOQ0UgPSAweDIzZjRlM2ExO1xuXG5leHBvcnQgY29uc3QgRVhURVJOQUxMWV9PV05FRF9BQ0NPVU5UX1RZUEVfSUQgPSAzO1xuZXhwb3J0IGNvbnN0IEVORElOR19TSUdOQUxfQllURSA9IDA7XG5leHBvcnQgY29uc3QgRU1QVFlfQlVGRkVSX0JZVEVfTEVOR1RIID0gMjtcbmV4cG9ydCBjb25zdCBFTVBUWV9CVUZGRVIgPSAwO1xuZXhwb3J0IGNvbnN0IEdBU19CVURHRVQgPSBCaWdJbnRlZ2VyKDUwMDAwMCk7XG5cbmV4cG9ydCBjb25zdCBDT05UUkFDVF9BTElBU19JRCA9ICcweGRjODYzMWQ1ZjJhMDEwNzIwMGNmMTJjZmVjMjczMzQyNDMyYzczZGIxNmFkNGE3Y2I2YTA2NmUwMGFiZDhmMGMnXG5cbmV4cG9ydCBjb25zdCBDT05UUkFDVF9BRERSRVNTID0gJ3JtczFwcndndnZ3NDcyc3BxdXNxZXVmdmxtcDh4ZHB5eHRybm12dDI2am51azZzeGRjcTJoazhzY2t1MjZoNyciLCJleHBvcnQgdHlwZSBXcml0ZWFibGVCeXRlU3RyZWFtQ29udGV4dCA9IHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgc3RvcmU6IFVpbnQ4QXJyYXk7XG4gIHNpemU6IG51bWJlcjtcbiAgcGFydE5hbWVzOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxheWVyMlBhcmFtZXRlcnMge1xuICBuZXR3b3JrQWRkcmVzczogc3RyaW5nO1xuICBnYXNCdWRnZXQ/OiBCaWdJbnRlZ2VyO1xufVxuXG5leHBvcnQgZW51bSBBbGxvd2FuY2Uge1xuICBTZXQgPSAwLFxuICBOb3RTZXQgPSAyNTUsXG59XG5cbmV4cG9ydCBjb25zdCBUQVJHRVRfQ09OVFJBQ1RTOiBSZWFkb25seTx7IFtrZXkgaW4gbnVtYmVyXTogc3RyaW5nIH0+ID0ge1xuICAweDNjNGI1ZTAyOiAnQWNjb3VudHMnLFxufVxuXG4vLyBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBoYXNoIG9mIHRyYW5zZmVyQWxsb3dhbmNlIGZ1bmN0aW9uIHdpdGggaXRzIHBhcmFtZXRlcnNcbmV4cG9ydCBjb25zdCBDT05UUkFDVF9GVU5DVElPTlM6IFJlYWRvbmx5PHsgW2tleSBpbiBzdHJpbmddOiBzdHJpbmcgfT4gPSB7XG4gIDB4MjNmNGUzYTE6ICd0cmFuc2ZlckFsbG93YW5jZVRvJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGF5ZXIyQWxsb3dhbmNlIHtcbiAgYmFzZVRva2VuQW1vdW50OiBzdHJpbmdcbiAgbmF0aXZlVG9rZW5zOiBOYXRpdmVUb2tlbkFtb3VudFtdXG59XG5cbmV4cG9ydCB0eXBlIE5hdGl2ZVRva2VuQW1vdW50ID0ge1xuICB0b2tlbklkOiBzdHJpbmdcbiAgYW1vdW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGF5ZXIyU21hcnRDb250cmFjdENhbGxEYXRhIGV4dGVuZHMgSUxheWVyMkFsbG93YW5jZSB7XG4gIHNlbmRlckNvbnRyYWN0OiBzdHJpbmdcbiAgdGFyZ2V0Q29udHJhY3Q6IHN0cmluZ1xuICBjb250cmFjdEZ1bmN0aW9uOiBzdHJpbmdcbiAgZ2FzQnVkZ2V0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IFRPS0VOX0lEX0JZVEVfTEVOR1RIID0gMzggLy8gYnl0ZXNcblxuZXhwb3J0IGludGVyZmFjZSBJTGF5ZXIyVHJhbnNmZXJBbGxvd2FuY2VNZXRhZGF0YSBleHRlbmRzIElMYXllcjJTbWFydENvbnRyYWN0Q2FsbERhdGEge1xuICBldGhlcmV1bUFkZHJlc3M6IHN0cmluZ1xufSIsIlxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydERhdGVUb1VuaXhUaW1lc3RhbXAoZGF0ZTogRGF0ZSkge1xuICByZXR1cm4gZGF0ZSA/IE1hdGgucm91bmQoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKSA6IGRhdGU7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY2ltYWxUb0hleChudW1iZXI6IG51bWJlciwgcHJlZml4ID0gZmFsc2UpOiBzdHJpbmcge1xuICByZXR1cm4gcHJlZml4ID8gJzB4JyArIG51bWJlci50b1N0cmluZygxNikgOiBudW1iZXIudG9TdHJpbmcoMTYpXG59IiwiaW1wb3J0IHtcbiAgaW5pdCxcbiAgQ2xpZW50LFxuICBDb2luVHlwZSxcbiAgaW5pdExvZ2dlcixcbiAgU0hJTU1FUl9URVNUTkVUX0JFQ0gzMl9IUlAsXG4gIElCYXNpY091dHB1dEJ1aWxkZXJPcHRpb25zLFxuICBJQnVpbGRCbG9ja09wdGlvbnNcbn0gZnJvbSAnQGlvdGEvY2xpZW50LXdhc20vd2ViJztcbmltcG9ydCB0eXBlIHtcbiAgQWRkcmVzc1R5cGVzLFxuICBGZWF0dXJlVHlwZXMsXG4gIEhleEVuY29kZWRTdHJpbmcsXG4gIElOYXRpdmVUb2tlbixcbiAgVW5sb2NrQ29uZGl0aW9uVHlwZXMsXG4gIEFERFJFU1NfVU5MT0NLX0NPTkRJVElPTl9UWVBFLFxuICBCQVNJQ19PVVRQVVRfVFlQRSxcbiAgRWQyNTUxOVNlZWQsXG4gIEVEMjU1MTlfQUREUkVTU19UWVBFLFxuICBFRDI1NTE5X1NJR05BVFVSRV9UWVBFLFxuICBFZDI1NTE5QWRkcmVzcyxcbiAgSUtleVBhaXIsXG4gIElTaWduYXR1cmVVbmxvY2ssXG4gIFNJR05BVFVSRV9VTkxPQ0tfVFlQRSxcbiAgVFJBTlNBQ1RJT05fRVNTRU5DRV9UWVBFLFxuICBUUkFOU0FDVElPTl9QQVlMT0FEX1RZUEUsXG4gIElUcmFuc2FjdGlvbkVzc2VuY2UsXG4gIElUcmFuc2FjdGlvblBheWxvYWQsXG4gIElVVFhPSW5wdXQsXG4gIFVUWE9fSU5QVVRfVFlQRSxcbiAgSUJhc2ljT3V0cHV0LFxuICBJQmxvY2ssXG4gIElPdXRwdXRSZXNwb25zZSxcbiAgSU5mdE91dHB1dCxcbiAgSUNvbW1vbk91dHB1dCxcbiAgT3V0cHV0VHlwZXMsXG59IGZyb20gJ0Bpb3RhL3R5cGVzJztcbmNvbnN0IERFRkFVTFRfUFJPVE9DT0xfVkVSU0lPTiA9IDI7XG5pbXBvcnQge1xuICBBQ0NPVU5UU19DT05UUkFDVCxcbiAgQ09OVFJBQ1RfQUREUkVTUyxcbiAgQ09OVFJBQ1RfQUxJQVNfSUQsXG4gIEVNUFRZX0JVRkZFUixcbiAgRU1QVFlfQlVGRkVSX0JZVEVfTEVOR1RILFxuICBFTkRJTkdfU0lHTkFMX0JZVEUsXG4gIEVYVEVSTkFMTFlfT1dORURfQUNDT1VOVCxcbiAgRVhURVJOQUxMWV9PV05FRF9BQ0NPVU5UX1RZUEVfSUQsXG4gIEdBU19CVURHRVQsXG4gIFRSQU5TRkVSX0FMTE9XQU5DRSxcbn0gZnJvbSAnLi9jb25zdGFudCc7XG5pbXBvcnQgeyBBbGxvd2FuY2UsIENPTlRSQUNUX0ZVTkNUSU9OUywgSUxheWVyMkFsbG93YW5jZSwgSUxheWVyMlBhcmFtZXRlcnMsIElMYXllcjJUcmFuc2ZlckFsbG93YW5jZU1ldGFkYXRhLCBOYXRpdmVUb2tlbkFtb3VudCwgVEFSR0VUX0NPTlRSQUNUUywgVE9LRU5fSURfQllURV9MRU5HVEggfSBmcm9tICcuL3R5cGVzJztcbmludGVyZmFjZSBBc3NldHMge1xuICBuYXRpdmVUb2tlbnM/OiBJTmF0aXZlVG9rZW5bXTtcbiAgbmZ0SWQ/OiBIZXhFbmNvZGVkU3RyaW5nO1xufVxuXG5pbXBvcnQgeyBXcml0ZVN0cmVhbSwgQ29udmVydGVyLCBSZWFkU3RyZWFtIH0gZnJvbSAnQGlvdGEvdXRpbC5qcyc7XG5pbXBvcnQgeyBjb252ZXJ0RGF0ZVRvVW5peFRpbWVzdGFtcCwgZGVjaW1hbFRvSGV4IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBCaWdJbnRlZ2VyIGZyb20gJ2JpZy1pbnRlZ2VyJztcblxuY2xhc3MgTDFUb0wyIHtcbiAgcHJpdmF0ZSBfY2xpZW50OkNsaWVudHx1bmRlZmluZWQ7XG4gIHByaXZhdGUgX2Zyb21BZGRyZXNzSGV4OiBzdHJpbmd8dW5kZWZpbmVkO1xuICBwcml2YXRlIF9mcm9tQWRkcmVzc0JlY2gzMjogc3RyaW5nfHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfbW5lbW9uaWM6IHN0cmluZ3x1bmRlZmluZWQ7XG4gIGNvbnN0cnVjdG9yKCl7XG5cbiAgfVxuICBhc3luYyBzZXR1cChwYXRoPzpzdHJpbmcpe1xuICAgIGF3YWl0IGluaXQocGF0aCA/IHBhdGggOiAnLi9jbGllbnRfd2FzbV9iZy53YXNtJyk7XG4gICAgYXdhaXQgaW5pdExvZ2dlcigpO1xuICAgIFxuICAgIHRoaXMuX2NsaWVudCA9IG5ldyBDbGllbnQoe1xuICAgICAgbm9kZXM6IFsnaHR0cHM6Ly9hcGkudGVzdG5ldC5zaGltbWVyLm5ldHdvcmsnXSxcbiAgICAgIGxvY2FsUG93OiB0cnVlLFxuICAgIH0pO1xuICB9XG4gIHByaXZhdGUgX2FkZEdhc0J1ZGdldChyYXdBbW91bnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYmlnQW1vdW50ID0gQmlnSW50ZWdlcihyYXdBbW91bnQpLmFkZChHQVNfQlVER0VUKTtcbiAgICByZXR1cm4gYmlnQW1vdW50LnRvU3RyaW5nKCk7XG4gIH1cbiAgXG4gIHByaXZhdGUgX2VuY29kZVNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzKFxuICAgIHBhcmFtZXRlcnM6IFtzdHJpbmcsIHN0cmluZ11bXSxcbiAgKTogVWludDhBcnJheSB7XG4gICAgY29uc3QgZW5jb2RlZFBhcmFtZXRlcnMgPSBuZXcgV3JpdGVTdHJlYW0oKTtcbiAgICBlbmNvZGVkUGFyYW1ldGVycy53cml0ZVVJbnQzMigncGFyYW1ldGVyc0xlbmd0aCcsIHBhcmFtZXRlcnMubGVuZ3RoKTtcbiAgXG4gICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcGFyYW1ldGVycykge1xuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gcGFyYW1ldGVyO1xuICBcbiAgICAgIGNvbnN0IGtleUJ5dGVzID0gQ29udmVydGVyLnV0ZjhUb0J5dGVzKGtleSk7XG4gICAgICBlbmNvZGVkUGFyYW1ldGVycy53cml0ZVVJbnQxNigna2V5TGVuZ3RoJywga2V5Lmxlbmd0aCk7XG4gICAgICBlbmNvZGVkUGFyYW1ldGVycy53cml0ZUJ5dGVzKCdrZXlCeXRlcycsIGtleUJ5dGVzLmxlbmd0aCwga2V5Qnl0ZXMpO1xuICBcbiAgICAgIGNvbnN0IHZhbHVlQnl0ZXMgPSBDb252ZXJ0ZXIuaGV4VG9CeXRlcyh2YWx1ZSk7XG4gICAgICBlbmNvZGVkUGFyYW1ldGVycy53cml0ZVVJbnQzMigndmFsdWVMZW5ndGgnLCB2YWx1ZUJ5dGVzLmxlbmd0aCk7XG4gICAgICBlbmNvZGVkUGFyYW1ldGVycy53cml0ZUJ5dGVzKCd2YWx1ZUJ5dGVzJywgdmFsdWVCeXRlcy5sZW5ndGgsIHZhbHVlQnl0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZFBhcmFtZXRlcnMuZmluYWxCeXRlcygpO1xuICB9XG4gIHByaXZhdGUgX2dldFNlY3JldE1hbmFnZXIoKXtcbiAgICByZXR1cm4ge1xuICAgICAgbW5lbW9uaWM6dGhpcy5fbW5lbW9uaWMhLFxuICAgIH07XG4gIH07XG4gIHNldE1uZW1vbmljKG1uZW1vbmljOnN0cmluZyl7XG4gICAgdGhpcy5fbW5lbW9uaWMgPSBtbmVtb25pY1xuICB9XG4gIGFzeW5jIGdldE91dHB1dEZvclNlbmQoXG4gICAgYW1vdW50OiBzdHJpbmcsXG4gICl7XG4gICAgY29uc3QgdGFyZ2V0QW1vdW50ID0gQmlnSW50ZWdlcihhbW91bnQpO1xuICAgIGNvbnN0IG91dHB1dHMgPSBhd2FpdCB0aGlzLmdldFVuc3BlbnRPdXRwdXRzKCk7XG4gICAgaWYgKCFvdXRwdXRzKSByZXR1cm47XG4gICAgZm9yIChjb25zdCBvdXRwdXRSZXNwIG9mIG91dHB1dHMpIHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IG91dHB1dFJlc3Aub3V0cHV0O1xuICAgICAgY29uc3QgcmVzQW1vdW50ID0gQmlnSW50ZWdlcihvdXRwdXQuYW1vdW50KTtcbiAgICAgIGlmIChyZXNBbW91bnQuZ2VxKHRhcmdldEFtb3VudCkpIHtcbiAgICAgICAgcmV0dXJuIG91dHB1dFJlc3A7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG4gIFxuICBhc3luYyBnZXRPdXRwdXRGb3JOZnRTZW5kKFxuICAgIG5mdElkOiBzdHJpbmdcbiAgKXtcbiAgICBjb25zdCBvdXRwdXRzID0gYXdhaXQgdGhpcy5nZXROZnRPdXRwdXRzKCk7XG4gICAgaWYgKCFvdXRwdXRzKSByZXR1cm47XG4gICAgZm9yIChjb25zdCBvdXRwdXRSZXNwIG9mIG91dHB1dHMpIHtcbiAgICAgICAgaWYgKChvdXRwdXRSZXNwLm91dHB1dCBhcyBJTmZ0T3V0cHV0ICkubmZ0SWQgPT09IG5mdElkKSB7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dFJlc3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gIH1cbiAgXG4gIGFzeW5jIGdldE5mdE91dHB1dHMoKTpQcm9taXNlPElPdXRwdXRSZXNwb25zZVtdfHVuZGVmaW5lZD57XG4gICAgaWYgKCF0aGlzLl9jbGllbnQpIHJldHVyblxuICAgIGNvbnN0IG91dHB1dElkc1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5fY2xpZW50Lm5mdE91dHB1dElkcyhbXG4gICAgICB7IGFkZHJlc3M6dGhpcy5fZnJvbUFkZHJlc3NCZWNoMzI/PycnIH0sXG4gICAgXSk7XG4gICAgbGV0IGFkZHJlc3NPdXRwdXRzID0gYXdhaXQgdGhpcy5fY2xpZW50LmdldE91dHB1dHMob3V0cHV0SWRzUmVzcG9uc2UpO1xuICAgIGNvbnNvbGUubG9nKCdhbGwgbmZ0IG91dHB1dHMnLGFkZHJlc3NPdXRwdXRzKVxuICAgIHJldHVybiBhZGRyZXNzT3V0cHV0cztcbiAgfVxuICBhc3luYyBnZXRVbnNwZW50T3V0cHV0cygpOlByb21pc2U8SU91dHB1dFJlc3BvbnNlW118dW5kZWZpbmVkPntcbiAgICBpZiAoIXRoaXMuX2NsaWVudCkgcmV0dXJuXG4gICAgY29uc3Qgb3V0cHV0SWRzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9jbGllbnQuYmFzaWNPdXRwdXRJZHMoW1xuICAgICAgeyBhZGRyZXNzOnRoaXMuX2Zyb21BZGRyZXNzQmVjaDMyPz8nJyB9LFxuICAgICAgeyBoYXNFeHBpcmF0aW9uOiBmYWxzZSB9LFxuICAgICAgeyBoYXNUaW1lbG9jazogZmFsc2UgfSxcbiAgICAgIHsgaGFzU3RvcmFnZURlcG9zaXRSZXR1cm46IGZhbHNlIH0sXG4gICAgXSk7XG4gIFxuICAgIC8vIEdldCBvdXRwdXRzIGJ5IHRoZWlyIElEc1xuICAgIGxldCBhZGRyZXNzT3V0cHV0cyA9IGF3YWl0IHRoaXMuX2NsaWVudC5nZXRPdXRwdXRzKG91dHB1dElkc1Jlc3BvbnNlKTtcbiAgICBjb25zb2xlLmxvZygnYWxsIG91dHB1dHMnLGFkZHJlc3NPdXRwdXRzKVxuICAgIC8vIEZpbHRlciBvdXQgc3BlbnQgb3V0cHV0c1xuICAgIGFkZHJlc3NPdXRwdXRzID0gYWRkcmVzc091dHB1dHMuZmlsdGVyKG89PiFvLm1ldGFkYXRhLmlzU3BlbnQpXG4gICAgY29uc29sZS5sb2coJ3Vuc3BlbnQgb3V0cHV0cycsYWRkcmVzc091dHB1dHMpXG4gICAgcmV0dXJuIGFkZHJlc3NPdXRwdXRzO1xuICB9XG4gIGFzeW5jIHByZXBhcmVBZGRyZXNzKCl7XG4gICAgaWYgKHRoaXMuX2Zyb21BZGRyZXNzQmVjaDMyID09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3Qgc2VjcmV0TWFuYWdlciA9IHRoaXMuX2dldFNlY3JldE1hbmFnZXIoKTtcbiAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IGF3YWl0IHRoaXMuX2NsaWVudD8uZ2VuZXJhdGVBZGRyZXNzZXMoc2VjcmV0TWFuYWdlciwge1xuICAgICAgICBhY2NvdW50SW5kZXg6IDAsXG4gICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgICAgZW5kOiAxLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZygnYWRkcmVzcycsYWRkcmVzc2VzKVxuICAgICAgdGhpcy5fZnJvbUFkZHJlc3NCZWNoMzIgPSBhZGRyZXNzZXM/IGFkZHJlc3Nlc1swXTp1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5fZnJvbUFkZHJlc3NCZWNoMzIpIHRoaXMuX2Zyb21BZGRyZXNzSGV4ID0gYXdhaXQgdGhpcy5fY2xpZW50Py5iZWNoMzJUb0hleCh0aGlzLl9mcm9tQWRkcmVzc0JlY2gzMilcbiAgICB9XG4gIH1cbiAgXG4gIHByaXZhdGUgX2VuY29kZUFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBlbmNvZGVkQWRkcmVzcyA9IG5ldyBXcml0ZVN0cmVhbSgpO1xuICAgIGVuY29kZWRBZGRyZXNzLndyaXRlVUludDgoXG4gICAgICAnQWRkcmVzcyBUeXBlIElEJyxcbiAgICAgIEVYVEVSTkFMTFlfT1dORURfQUNDT1VOVF9UWVBFX0lELFxuICAgICk7XG4gICAgY29uc3QgYWRkcmVzc0J5dGVzID0gQ29udmVydGVyLmhleFRvQnl0ZXMoYWRkcmVzcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRyZXNzQnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGVuY29kZWRBZGRyZXNzLndyaXRlVUludDgoJ0FkZHJlc3MgYnl0ZScsIGFkZHJlc3NCeXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkQWRkcmVzcy5maW5hbEhleCgpO1xuICB9XG4gIHByaXZhdGUgX2dldExheWVyMk1ldGFkYXRhRm9yVHJhbnNmZXIoXG4gICAgbGF5ZXIyQWRkcmVzczogc3RyaW5nLFxuICAgIHJhd0Ftb3VudDogc3RyaW5nLFxuICAgIG5hdGl2ZVRva2VuSWQ/OiBzdHJpbmcsXG4gICAgc3VycGx1cz86IHN0cmluZyxcbiAgKTogc3RyaW5nIHtcbiAgICBjb25zdCBtZXRhZGF0YVN0cmVhbSA9IG5ldyBXcml0ZVN0cmVhbSgpO1xuICBcbiAgICBtZXRhZGF0YVN0cmVhbS53cml0ZVVJbnQzMignc2VuZGVyQ29udHJhY3QnLCBFWFRFUk5BTExZX09XTkVEX0FDQ09VTlQpO1xuICAgIG1ldGFkYXRhU3RyZWFtLndyaXRlVUludDMyKCd0YXJnZXRDb250cmFjdCcsIEFDQ09VTlRTX0NPTlRSQUNUKTtcbiAgICBtZXRhZGF0YVN0cmVhbS53cml0ZVVJbnQzMignY29udHJhY3RGdW5jdGlvbicsIFRSQU5TRkVSX0FMTE9XQU5DRSk7XG4gICAgbWV0YWRhdGFTdHJlYW0ud3JpdGVVSW50NjQoJ2dhc0J1ZGdldCcsIEdBU19CVURHRVQpO1xuICBcbiAgICBjb25zdCBlbmNvZGVkQWRkcmVzcyA9IHRoaXMuX2VuY29kZUFkZHJlc3MobGF5ZXIyQWRkcmVzcy50b0xvd2VyQ2FzZSgpKTtcbiAgICBjb25zdCBzbWFydENvbnRyYWN0UGFyYW1ldGVycyA9IE9iamVjdC5lbnRyaWVzKHsgYTogZW5jb2RlZEFkZHJlc3MgfSk7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IHRoaXMuX2VuY29kZVNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzKHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzKTtcbiAgICBtZXRhZGF0YVN0cmVhbS53cml0ZUJ5dGVzKFxuICAgICAgJ3NtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzJyxcbiAgICAgIHBhcmFtZXRlcnMubGVuZ3RoLFxuICAgICAgcGFyYW1ldGVycyxcbiAgICApO1xuICBcbiAgICBjb25zdCBhbGxvd2FuY2UgPSB0aGlzLl9lbmNvZGVBbGxvd2FuY2UocmF3QW1vdW50LCBuYXRpdmVUb2tlbklkLCBzdXJwbHVzKTtcbiAgICBtZXRhZGF0YVN0cmVhbS53cml0ZUJ5dGVzKCdhbGxvd2FuY2UnLCBhbGxvd2FuY2UubGVuZ3RoLCBhbGxvd2FuY2UpO1xuICBcbiAgICBtZXRhZGF0YVN0cmVhbS53cml0ZVVJbnQxNignZW5kJywgRU5ESU5HX1NJR05BTF9CWVRFKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9ICcweCcgKyBtZXRhZGF0YVN0cmVhbS5maW5hbEhleCgpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfVxuICBwcml2YXRlIF9lbmNvZGVBbGxvd2FuY2UoXG4gICAgcmF3QW1vdW50OiBzdHJpbmcsXG4gICAgbmF0aXZlVG9rZW5JZD86IHN0cmluZyxcbiAgICBzdXJwbHVzPzogc3RyaW5nLFxuICApOiBVaW50OEFycmF5IHtcbiAgICBjb25zdCBhbGxvd2FuY2UgPSBuZXcgV3JpdGVTdHJlYW0oKTtcbiAgICBjb25zdCB0b2tlbkJ1ZmZlciA9IG5ldyBXcml0ZVN0cmVhbSgpO1xuICBcbiAgICAvL2lmICh0cmFuc2FjdGlvbkRldGFpbHMudHlwZSA9PT0gTmV3VHJhbnNhY3Rpb25UeXBlLlRva2VuVHJhbnNmZXIpIHtcbiAgICBpZiAodHJ1ZSkge1xuICAgICAgYWxsb3dhbmNlLndyaXRlVUludDgoJ2VuY29kZWRBbGxvd2FuY2UnLCBBbGxvd2FuY2UuU2V0KTtcbiAgXG4gICAgICBpZiAobmF0aXZlVG9rZW5JZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsb3dhbmNlLndyaXRlVUludDY0KCdpb3RhQW1vdW50JywgQmlnSW50ZWdlcihyYXdBbW91bnQpKTtcbiAgICAgICAgYWxsb3dhbmNlLndyaXRlVUludDE2KCdub1Rva2VucycsIEVNUFRZX0JVRkZFUl9CWVRFX0xFTkdUSCk7XG4gICAgICAgIGFsbG93YW5jZS53cml0ZVVJbnQxNignZW1wdHlUb2tlbkJ1ZmZlcicsIEVNUFRZX0JVRkZFUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGxvd2FuY2Uud3JpdGVVSW50NjQoJ2lvdGFBbW91bnQnLCBCaWdJbnRlZ2VyKHN1cnBsdXMgPz8gJzAnKSk7XG4gIFxuICAgICAgICB0b2tlbkJ1ZmZlci53cml0ZVVJbnQxNignYW1vdW50T2ZUb2tlbnMnLCAxKTtcbiAgICAgICAgY29uc3QgdG9rZW5JZEJ5dGVzID0gQ29udmVydGVyLmhleFRvQnl0ZXMobmF0aXZlVG9rZW5JZC5zdWJzdHJpbmcoMikpO1xuICAgICAgICB0b2tlbkJ1ZmZlci53cml0ZUJ5dGVzKCd0b2tlbklkJywgdG9rZW5JZEJ5dGVzLmxlbmd0aCwgdG9rZW5JZEJ5dGVzKTtcbiAgICAgICAgdG9rZW5CdWZmZXIud3JpdGVVSW50MjU2KCdhbW91bnQnLCBCaWdJbnRlZ2VyKHJhd0Ftb3VudCkpO1xuICAgICAgICBjb25zdCB0b2tlbkJ1ZmZlckJ5dGVzID0gdG9rZW5CdWZmZXIuZmluYWxCeXRlcygpO1xuICBcbiAgICAgICAgYWxsb3dhbmNlLndyaXRlVUludDE2KCd0b2tlbnNMZW5ndGgnLCB0b2tlbkJ1ZmZlckJ5dGVzLmxlbmd0aCk7XG4gICAgICAgIGFsbG93YW5jZS53cml0ZUJ5dGVzKFxuICAgICAgICAgICd0b2tlbkJ1ZmZlcicsXG4gICAgICAgICAgdG9rZW5CdWZmZXJCeXRlcy5sZW5ndGgsXG4gICAgICAgICAgdG9rZW5CdWZmZXJCeXRlcyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbG93YW5jZS5maW5hbEJ5dGVzKCk7XG4gIH1cbiAgcHJpdmF0ZSBfZ2V0QW1vdW50RnJvbVRyYW5zYWN0aW9uRGV0YWlscyh7cmF3QW1vdW50LG5mdElkLG5hdGl2ZVRva2VuSWQsc3VycGx1c306e1xuICAgIHJhd0Ftb3VudDogc3RyaW5nO1xuICAgIG5mdElkPzogc3RyaW5nO1xuICAgIG5hdGl2ZVRva2VuSWQ/OiBzdHJpbmc7XG4gICAgc3VycGx1cz86IHN0cmluZztcbiAgfSl7XG4gICAgaWYgKCFuZnRJZCkge1xuICAgICAgXG4gICAgICBpZiAobmF0aXZlVG9rZW5JZCkge1xuICAgICAgICAgIHJhd0Ftb3VudCA9IHN1cnBsdXMgPz8gJzAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhd0Ftb3VudCA9IEJpZ0ludChyYXdBbW91bnQpLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgfSBlbHNlIGlmIChuZnRJZCkge1xuICAgICAgcmF3QW1vdW50ID0gc3VycGx1cyA/PyAnMCdcbiAgfSBlbHNlIHtcbiAgICAgIHJhd0Ftb3VudCA9ICcwJ1xuICB9XG4gICAgcmV0dXJuIHJhd0Ftb3VudCA/PyAnMCc7XG4gIH1cblxuXG4gIHB1YmxpYyBhc3luYyBnZXRPdXRwdXRPcHRpb25zKFxuICAgIHNlbmRlckFkZHJlc3M6IEFkZHJlc3NUeXBlcyxcbiAgICByZWNpcGllbnRBZGRyZXNzOiBzdHJpbmcsXG4gICAgcmF3QW1vdW50OiBzdHJpbmcsXG4gICAgZXh0OiB7XG4gICAgICBuYXRpdmVUb2tlbklkPzogc3RyaW5nO1xuICAgICAgbWV0YWRhdGE/OiBIZXhFbmNvZGVkU3RyaW5nO1xuICAgICAgdGFnPzogc3RyaW5nO1xuICAgICAgZ2lmdFN0b3JhZ2VEZXBvc2l0PzogYm9vbGVhbjtcbiAgICAgIHN1cnBsdXM/OiBzdHJpbmc7XG4gICAgICBsYXllcjJQYXJhbWV0ZXJzPzogSUxheWVyMlBhcmFtZXRlcnM7XG4gICAgICBuZnRJZD86IHN0cmluZztcbiAgICAgIG5mdE91dHB1dD86IElOZnRPdXRwdXQ7XG4gICAgICBleHBpcmF0aW9uRGF0ZT86IERhdGU7XG4gICAgfSxcbiAgKTogUHJvbWlzZTxJQmFzaWNPdXRwdXQgfCBJTmZ0T3V0cHV0PiB7XG4gICAgLy8gaWYgKCF0aGlzLl9jbGllbnQpIHRocm93IG5ldyBFcnJvcignY2xpZW50IG5vdCBpbml0JylcbiAgICBsZXQge1xuICAgICAgbmF0aXZlVG9rZW5JZCxcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgdGFnLFxuICAgICAgZ2lmdFN0b3JhZ2VEZXBvc2l0LFxuICAgICAgc3VycGx1cyxcbiAgICAgIGxheWVyMlBhcmFtZXRlcnMsXG4gICAgICBuZnRJZCxcbiAgICAgIG5mdE91dHB1dCxcbiAgICAgIGV4cGlyYXRpb25EYXRlLFxuICAgIH0gPSBleHQ7XG4gICAgY29uc3QgdW5peFRpbWUgPSBleHBpcmF0aW9uRGF0ZVxuICAgICAgPyBjb252ZXJ0RGF0ZVRvVW5peFRpbWVzdGFtcChleHBpcmF0aW9uRGF0ZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuICAgIGxldCBhbW91bnQgPSB0aGlzLl9nZXRBbW91bnRGcm9tVHJhbnNhY3Rpb25EZXRhaWxzKHtyYXdBbW91bnQsbmZ0SWQsbmF0aXZlVG9rZW5JZCxzdXJwbHVzfSk7XG4gICAgYW1vdW50ID0gbGF5ZXIyUGFyYW1ldGVycyA/IHRoaXMuX2FkZEdhc0J1ZGdldChhbW91bnQpIDogYW1vdW50OyBcbiAgICBjb25zdCBiaWdBbW91bnQgPSBCaWdJbnRlZ2VyKHJhd0Ftb3VudCk7XG4gIFxuICBcbiAgICBpZiAodGFnICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGFnID0gQ29udmVydGVyLnV0ZjhUb0hleCh0YWcsIHRydWUpO1xuICAgIH1cbiAgICBtZXRhZGF0YSA9IGxheWVyMlBhcmFtZXRlcnMgPyB0aGlzLl9nZXRMYXllcjJNZXRhZGF0YUZvclRyYW5zZmVyKFxuICAgICAgcmVjaXBpZW50QWRkcmVzcyxcbiAgICAgIHJhd0Ftb3VudCxcbiAgICAgIG5hdGl2ZVRva2VuSWQsXG4gICAgICBzdXJwbHVzLFxuICAgICkgOiAobWV0YWRhdGEgPyBDb252ZXJ0ZXIudXRmOFRvSGV4KG1ldGFkYXRhLCB0cnVlKSA6IG1ldGFkYXRhKTtcbiAgICAgIFxuICAgIHJlY2lwaWVudEFkZHJlc3MgPSBsYXllcjJQYXJhbWV0ZXJzID8gYXdhaXQgdGhpcy5fY2xpZW50LmJlY2gzMlRvSGV4KGxheWVyMlBhcmFtZXRlcnMubmV0d29ya0FkZHJlc3MpIDogcmVjaXBpZW50QWRkcmVzcztcbiAgICBcbiAgICBjb25zdCBhc3NldHM6IEFzc2V0cyA9IHt9O1xuICAgIGlmIChuZnRJZCkge1xuICAgICAgYXNzZXRzLm5mdElkID0gbmZ0SWQ7XG4gICAgfSBlbHNlIGlmIChuYXRpdmVUb2tlbklkKSB7XG4gICAgICBhc3NldHMubmF0aXZlVG9rZW5zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IG5hdGl2ZVRva2VuSWQsXG4gICAgICAgICAgYW1vdW50OiAnMHgnICsgYmlnQW1vdW50LnRvU3RyaW5nKDE2KSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IGZlYXR1cmVzOiBGZWF0dXJlVHlwZXNbXSA9IFtdO1xuICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgZmVhdHVyZXMucHVzaCh7IHR5cGU6IDIsIGRhdGE6IG1ldGFkYXRhIH0pO1xuICAgIH1cbiAgICBpZiAobGF5ZXIyUGFyYW1ldGVycykge1xuICAgICAgZmVhdHVyZXMucHVzaCh7IHR5cGU6IDAsIGFkZHJlc3M6IHNlbmRlckFkZHJlc3MgfSk7XG4gICAgfVxuICAgIGlmICh0YWcpIHtcbiAgICAgIGZlYXR1cmVzLnB1c2goeyB0eXBlOiAzLCB0YWcgfSk7XG4gICAgfVxuICAgIGNvbnN0IHVubG9ja0NvbmRpdGlvbnM6IFVubG9ja0NvbmRpdGlvblR5cGVzW10gPSBbe3R5cGU6MCxhZGRyZXNzOnt0eXBlOjgsYWxpYXNJZDpcbiAgICAgIENPTlRSQUNUX0FMSUFTX0lEXG4gICAgfX1dO1xuICAgIGlmICh1bml4VGltZSkge1xuICAgICAgdW5sb2NrQ29uZGl0aW9ucy5wdXNoKHsgdHlwZTogMiwgdW5peFRpbWUgfSk7XG4gICAgfVxuICAgIGlmIChuZnRJZCAmJiBuZnRPdXRwdXQpIHJldHVybiB7XG4gICAgICB0eXBlOjYsXG4gICAgICBhbW91bnQ6dGhpcy5fYWRkR2FzQnVkZ2V0KG5mdE91dHB1dC5hbW91bnQpLFxuICAgICAgbmZ0SWQsXG4gICAgICBpbW11dGFibGVGZWF0dXJlczpuZnRPdXRwdXQuaW1tdXRhYmxlRmVhdHVyZXMsXG4gICAgICBmZWF0dXJlcyxcbiAgICAgIHVubG9ja0NvbmRpdGlvbnMsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTozLFxuICAgICAgYW1vdW50LFxuICAgICAgZmVhdHVyZXMsXG4gICAgICB1bmxvY2tDb25kaXRpb25zLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBzZW5kVHJhbnNhY3Rpb24oXG4gICAgdG9BZGRyOiBzdHJpbmcsXG4gICAgYW1vdW50OiBzdHJpbmcsXG4gICAgbmZ0SWQ/OiBzdHJpbmcsXG4gICl7XG4gICAgaWYgKCEodGhpcy5fY2xpZW50ICYmIHRoaXMuX2Zyb21BZGRyZXNzQmVjaDMyKSkgcmV0dXJuO1xuICAgIGxldCBuZnRPdXRwdXQ6SU91dHB1dFJlc3BvbnNlfHVuZGVmaW5lZFxuICAgIGlmIChuZnRJZCkge1xuICAgICAgbmZ0T3V0cHV0ID0gYXdhaXQgdGhpcy5nZXRPdXRwdXRGb3JOZnRTZW5kKG5mdElkKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0RGV0YWlsID0gYXdhaXQgdGhpcy5nZXRPdXRwdXRGb3JTZW5kKGFtb3VudCk7XG4gICAgaWYgKG91dHB1dERldGFpbCA9PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICBjb25zdCB0b3RhbEZ1bmRzID0gQmlnSW50ZWdlcihvdXRwdXREZXRhaWwub3V0cHV0LmFtb3VudCk7XG4gIFxuICAgIGNvbnN0IGFtb3VudFRvU2VuZCA9IEJpZ0ludGVnZXIoYW1vdW50KTtcbiAgXG4gICAgY29uc3QgaW5wdXRzOiBJVVRYT0lucHV0W10gPSBbXTtcbiAgICBpbnB1dHMucHVzaCh7XG4gICAgICB0eXBlOiAwLFxuICAgICAgdHJhbnNhY3Rpb25JZDogb3V0cHV0RGV0YWlsLm1ldGFkYXRhLnRyYW5zYWN0aW9uSWQsXG4gICAgICB0cmFuc2FjdGlvbk91dHB1dEluZGV4OiBvdXRwdXREZXRhaWwubWV0YWRhdGEub3V0cHV0SW5kZXgsXG4gICAgfSk7XG4gICAgXG4gICAgaWYgKG5mdE91dHB1dCkge1xuICAgICAgaW5wdXRzLnB1c2goe1xuICAgICAgICB0eXBlOiAwLFxuICAgICAgICB0cmFuc2FjdGlvbklkOiBuZnRPdXRwdXQubWV0YWRhdGEudHJhbnNhY3Rpb25JZCxcbiAgICAgICAgdHJhbnNhY3Rpb25PdXRwdXRJbmRleDogbmZ0T3V0cHV0Lm1ldGFkYXRhLm91dHB1dEluZGV4LFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dHM6IE91dHB1dFR5cGVzW10gPSBbXTtcbiAgICBcbiAgICBjb25zdCBiYXNpY091dHB1dDogSUJhc2ljT3V0cHV0IHwgSU5mdE91dHB1dCA9IGF3YWl0IHRoaXMuZ2V0T3V0cHV0T3B0aW9ucyhcbiAgICAgIHsgdHlwZTogMCwgcHViS2V5SGFzaDogdGhpcy5fZnJvbUFkZHJlc3NIZXg/PycnIH0sXG4gICAgICB0b0FkZHIsXG4gICAgICBhbW91bnQsXG4gICAgICB7XG4gICAgICAgIG5mdElkLFxuICAgICAgICBuZnRPdXRwdXQ6IG5mdE91dHB1dD8ub3V0cHV0IGFzIElOZnRPdXRwdXQsXG4gICAgICAgIGxheWVyMlBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBuZXR3b3JrQWRkcmVzczogQ09OVFJBQ1RfQUREUkVTUyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcbiAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJvdXRwdXRzJyxiYXNpY091dHB1dClcbiAgICBvdXRwdXRzLnB1c2goYmFzaWNPdXRwdXQpO1xuICAgIGlmICh0b3RhbEZ1bmRzLmd0KGFtb3VudFRvU2VuZCkpIHtcbiAgICAgIC8vIFRoZSByZW1haW5pbmcgb3V0cHV0IHRoYXQgcmVtYWlucyBpbiB0aGUgb3JpZ2luIGFkZHJlc3NcbiAgICAgIGxldCByZW1haW5pbmdGdW5kID0gdG90YWxGdW5kcy5taW51cyhCaWdJbnRlZ2VyKGJhc2ljT3V0cHV0LmFtb3VudCkpXG4gICAgICBjb25zdCByZW1haW5kZXJCYXNpY091dHB1dDogSUJhc2ljT3V0cHV0ID0ge1xuICAgICAgICB0eXBlOiAzLFxuICAgICAgICBhbW91bnQ6IHJlbWFpbmluZ0Z1bmQudG9TdHJpbmcoKSxcbiAgICAgICAgbmF0aXZlVG9rZW5zOiBbXSxcbiAgICAgICAgdW5sb2NrQ29uZGl0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IDAsXG4gICAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICAgIHR5cGU6IDAsXG4gICAgICAgICAgICAgIHB1YktleUhhc2g6IHRoaXMuX2Zyb21BZGRyZXNzSGV4Pz8nJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZmVhdHVyZXM6IFtdLFxuICAgICAgfTtcbiAgICAgIG91dHB1dHMucHVzaChyZW1haW5kZXJCYXNpY091dHB1dCk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKG91dHB1dHMpXG4gICAgY29uc3Qgc2VjcmV0TWFuYWdlciA9IHRoaXMuX2dldFNlY3JldE1hbmFnZXIoKTtcbiAgICBjb25zdCBibG9ja09wdGlvbjpJQnVpbGRCbG9ja09wdGlvbnMgPSB7IGlucHV0cywgb3V0cHV0cyB9XG4gICAgY29uc29sZS5sb2coYmxvY2tPcHRpb24pXG4gICAgY29uc3QgcHJlcGFyZWRUcmFuc2FjdGlvbkRhdGEgPSBhd2FpdCB0aGlzLl9jbGllbnQucHJlcGFyZVRyYW5zYWN0aW9uKFxuICAgICAgc2VjcmV0TWFuYWdlcixcbiAgICAgIGJsb2NrT3B0aW9uLFxuICAgICk7XG4gICAgY29uc29sZS5sb2cocHJlcGFyZWRUcmFuc2FjdGlvbkRhdGEpXG4gICAgY29uc3QgdHJhbnNhY3Rpb25QYXlsb2FkID0gKGF3YWl0IHRoaXMuX2NsaWVudC5zaWduVHJhbnNhY3Rpb24oXG4gICAgICBzZWNyZXRNYW5hZ2VyLFxuICAgICAgcHJlcGFyZWRUcmFuc2FjdGlvbkRhdGEsXG4gICAgKSkgYXMgSVRyYW5zYWN0aW9uUGF5bG9hZDtcbiAgICBjb25zb2xlLmxvZyh0cmFuc2FjdGlvblBheWxvYWQpXG5cbiAgICBjb25zdCBbYmxvY2tJZCxibG9ja10gPSBhd2FpdCB0aGlzLl9jbGllbnQucG9zdEJsb2NrUGF5bG9hZCh0cmFuc2FjdGlvblBheWxvYWQpO1xuICBcbiAgICBjb25zb2xlLmxvZyhibG9ja0lkLGJsb2NrKTtcbiAgfVxuICBlZDJiZWNoMzIoYWRkcmVzczpIZXhFbmNvZGVkU3RyaW5nKXtcbiAgICAgIHRoaXMuX2NsaWVudD8uaGV4VG9CZWNoMzIoYWRkcmVzcywncm1zJylcbiAgfVxuXG4gIHBhcnNlTGF5ZXIyTWV0YWRhdGFGb3JUcmFuc2ZlcihtZXRhZGF0YUhleDogc3RyaW5nKTogSUxheWVyMlRyYW5zZmVyQWxsb3dhbmNlTWV0YWRhdGEge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gQ29udmVydGVyLmhleFRvQnl0ZXMobWV0YWRhdGFIZXgpXG4gICAgY29uc3QgcmVhZFN0cmVhbSA9IG5ldyBSZWFkU3RyZWFtKG1ldGFkYXRhKVxuXG4gICAgY29uc3Qgc2VuZGVyQ29udHJhY3QgPSByZWFkU3RyZWFtLnJlYWRVSW50MzIoJ3NlbmRlckNvbnRyYWN0JylcbiAgICBjb25zdCB0YXJnZXRDb250cmFjdCA9IHJlYWRTdHJlYW0ucmVhZFVJbnQzMigndGFyZ2V0Q29udHJhY3QnKVxuICAgIGNvbnN0IGNvbnRyYWN0RnVuY3Rpb24gPSByZWFkU3RyZWFtLnJlYWRVSW50MzIoJ2NvbnRyYWN0RnVuY3Rpb24nKVxuICAgIGNvbnN0IGdhc0J1ZGdldCA9IHJlYWRTdHJlYW0ucmVhZFVJbnQ2NCgnZ2FzQnVkZ2V0JylcblxuICAgIGNvbnN0IHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzID0gdGhpcy5fcGFyc2VTbWFydENvbnRyYWN0UGFyYW1ldGVycyhyZWFkU3RyZWFtKVxuICAgIGNvbnN0IGV0aGVyZXVtQWRkcmVzcyA9ICcweCcgKyBzbWFydENvbnRyYWN0UGFyYW1ldGVyc1snYSddLnN1YnN0cmluZygyKVxuXG4gICAgY29uc3QgYWxsb3dhbmNlID0gdGhpcy5fcGFyc2VBbGxvd2FuY2UocmVhZFN0cmVhbSlcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbmRlckNvbnRyYWN0OiBkZWNpbWFsVG9IZXgoc2VuZGVyQ29udHJhY3QsIHRydWUpLFxuICAgICAgICB0YXJnZXRDb250cmFjdDogVEFSR0VUX0NPTlRSQUNUU1t0YXJnZXRDb250cmFjdF0gPz8gZGVjaW1hbFRvSGV4KHRhcmdldENvbnRyYWN0LCB0cnVlKSxcbiAgICAgICAgY29udHJhY3RGdW5jdGlvbjogQ09OVFJBQ1RfRlVOQ1RJT05TW2NvbnRyYWN0RnVuY3Rpb25dID8/IGRlY2ltYWxUb0hleChjb250cmFjdEZ1bmN0aW9uLCB0cnVlKSxcbiAgICAgICAgZ2FzQnVkZ2V0OiBnYXNCdWRnZXQudG9TdHJpbmcoKSxcbiAgICAgICAgZXRoZXJldW1BZGRyZXNzLFxuICAgICAgICBiYXNlVG9rZW5BbW91bnQ6IGFsbG93YW5jZT8uYmFzZVRva2VuQW1vdW50LFxuICAgICAgICBuYXRpdmVUb2tlbnM6IGFsbG93YW5jZT8ubmF0aXZlVG9rZW5zLFxuICAgIH1cbn1cblxuICBwcml2YXRlIF9wYXJzZVNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzKHJlYWRTdHJlYW06IFJlYWRTdHJlYW0pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICAgIGNvbnN0IHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzQW1vdW50ID0gcmVhZFN0cmVhbS5yZWFkVUludDMyKCdwYXJhbWV0ZXJzTGVuZ3RoJylcbiAgICAgIGNvbnN0IHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cblxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzQW1vdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5TGVuZ3RoID0gcmVhZFN0cmVhbS5yZWFkVUludDE2KCdrZXlMZW5ndGgnKVxuICAgICAgICAgIGNvbnN0IGtleUJ5dGVzID0gcmVhZFN0cmVhbS5yZWFkQnl0ZXMoJ2tleVZhbHVlJywga2V5TGVuZ3RoKVxuXG4gICAgICAgICAgY29uc3QgdmFsdWVMZW5ndGggPSByZWFkU3RyZWFtLnJlYWRVSW50MzIoJ3ZhbHVlTGVuZ3RoJylcbiAgICAgICAgICBjb25zdCB2YWx1ZUJ5dGVzID0gcmVhZFN0cmVhbS5yZWFkQnl0ZXMoJ3ZhbHVlQnl0ZXMnLCB2YWx1ZUxlbmd0aClcblxuICAgICAgICAgIGNvbnN0IGtleSA9IENvbnZlcnRlci5ieXRlc1RvVXRmOChrZXlCeXRlcylcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IENvbnZlcnRlci5ieXRlc1RvSGV4KHZhbHVlQnl0ZXMpXG5cbiAgICAgICAgICBzbWFydENvbnRyYWN0UGFyYW1ldGVyc1trZXldID0gdmFsdWVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzXG4gIH1cblxuICBwcml2YXRlIF9wYXJzZUFsbG93YW5jZShyZWFkU3RyZWFtOiBSZWFkU3RyZWFtKTogSUxheWVyMkFsbG93YW5jZSB7XG4gICAgICBjb25zdCBhbGxvd2FuY2UgPSByZWFkU3RyZWFtLnJlYWRVSW50OCgnYWxsb3dhbmNlJylcblxuICAgICAgaWYgKGFsbG93YW5jZSA9PT0gQWxsb3dhbmNlLlNldCkge1xuICAgICAgICAgIGNvbnN0IGJhc2VUb2tlbkFtb3VudCA9IHJlYWRTdHJlYW0ucmVhZFVJbnQ2NCgnYmFzZVRva2VuQW1vdW50JykudG9TdHJpbmcoKVxuICAgICAgICAgIHJlYWRTdHJlYW0ucmVhZFVJbnQxNigndG9rZW5CdWZmZXJCeXRlc0xlbmd0aCcpXG4gICAgICAgICAgY29uc3QgdG9rZW5BbW91bnQgPSByZWFkU3RyZWFtLnJlYWRVSW50MTYoJ3Rva2VuQW1vdW50JylcbiAgICAgICAgICBjb25zdCBuYXRpdmVUb2tlbnM6IE5hdGl2ZVRva2VuQW1vdW50W10gPSBbXVxuXG4gICAgICAgICAgZm9yIChsZXQgdG9rZW4gPSAwOyB0b2tlbiA8IHRva2VuQW1vdW50OyB0b2tlbisrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRva2VuSWQgPSBDb252ZXJ0ZXIuYnl0ZXNUb0hleChyZWFkU3RyZWFtLnJlYWRCeXRlcygndG9rZW5JZCcsIFRPS0VOX0lEX0JZVEVfTEVOR1RIKSlcbiAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcmVhZFN0cmVhbS5yZWFkVUludDI1NigndG9rZW5BbW91bnQnKS50b1N0cmluZygpXG4gICAgICAgICAgICAgIG5hdGl2ZVRva2Vucy5wdXNoKHsgdG9rZW5JZCwgYW1vdW50IH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYmFzZVRva2VuQW1vdW50LFxuICAgICAgICAgICAgICBuYXRpdmVUb2tlbnMsXG4gICAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gIH1cbn1cbmNvbnN0IGluc3RhbmNlID0gbmV3IEwxVG9MMlxuLy9AdHMtaWdub3JlXG53aW5kb3cubDF0b2wyID0gaW5zdGFuY2VcbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlXG5cblxuXG5cblxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidGhyb3ciLCJyZXR1cm4iLCJTeW1ib2wiLCJpdGVyYXRvciIsInRoaXMiLCJuIiwidiIsIm9wIiwiVHlwZUVycm9yIiwiY2FsbCIsInBvcCIsImxlbmd0aCIsInB1c2giLCJ3YXNtIiwiaGVhcCIsIkFycmF5IiwiZmlsbCIsInVuZGVmaW5lZCIsImdldE9iamVjdCIsImlkeCIsImhlYXBfbmV4dCIsInRha2VPYmplY3QiLCJyZXQiLCJkcm9wT2JqZWN0IiwiV0FTTV9WRUNUT1JfTEVOIiwiY2FjaGVkVWludDhNZW1vcnkwIiwiZ2V0VWludDhNZW1vcnkwIiwiYnl0ZUxlbmd0aCIsIlVpbnQ4QXJyYXkiLCJtZW1vcnkiLCJidWZmZXIiLCJjYWNoZWRUZXh0RW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlU3RyaW5nIiwiZW5jb2RlSW50byIsImFyZyIsInZpZXciLCJidWYiLCJlbmNvZGUiLCJzZXQiLCJyZWFkIiwid3JpdHRlbiIsInBhc3NTdHJpbmdUb1dhc20wIiwibWFsbG9jIiwicmVhbGxvYyIsInB0ciIsInN1YmFycmF5IiwibGVuIiwibWVtIiwib2Zmc2V0IiwiY29kZSIsImNoYXJDb2RlQXQiLCJzbGljZSIsImlzTGlrZU5vbmUiLCJ4IiwiY2FjaGVkSW50MzJNZW1vcnkwIiwiZ2V0SW50MzJNZW1vcnkwIiwiSW50MzJBcnJheSIsImNhY2hlZFRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJpZ25vcmVCT00iLCJmYXRhbCIsImdldFN0cmluZ0Zyb21XYXNtMCIsImRlY29kZSIsImFkZEhlYXBPYmplY3QiLCJvYmoiLCJkZWJ1Z1N0cmluZyIsInZhbCIsInR5cGUiLCJkZXNjcmlwdGlvbiIsIm5hbWUiLCJpc0FycmF5IiwiZGVidWciLCJpIiwiYnVpbHRJbk1hdGNoZXMiLCJleGVjIiwidG9TdHJpbmciLCJjbGFzc05hbWUiLCJKU09OIiwic3RyaW5naWZ5IiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhY2siLCJDTE9TVVJFX0RUT1JTIiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJzdGF0ZSIsIl9fd2JpbmRnZW5fZXhwb3J0XzIiLCJnZXQiLCJkdG9yIiwiYSIsImIiLCJtYWtlTXV0Q2xvc3VyZSIsImFyZzAiLCJhcmcxIiwiY250IiwicmVhbCIsImFyZ3MiLCJ1bnJlZ2lzdGVyIiwib3JpZ2luYWwiLCJyZWdpc3RlciIsIl9fd2JnX2FkYXB0ZXJfMjYiLCJfZHluX2NvcmVfX29wc19fZnVuY3Rpb25fX0ZuTXV0X19fX19PdXRwdXRfX19SX2FzX3dhc21fYmluZGdlbl9fY2xvc3VyZV9fV2FzbUNsb3N1cmVfX19kZXNjcmliZV9faW52b2tlX19oYWQ5ZDVkMzBjOGI4MzVhZiIsIl9fd2JnX2FkYXB0ZXJfMjkiLCJhcmcyIiwiX2R5bl9jb3JlX19vcHNfX2Z1bmN0aW9uX19Gbk11dF9fQV9fX19PdXRwdXRfX19SX2FzX3dhc21fYmluZGdlbl9fY2xvc3VyZV9fV2FzbUNsb3N1cmVfX19kZXNjcmliZV9faW52b2tlX19oYmMyZjNkNTc0MDE0ZTc0ZCIsInNlbmRNZXNzYWdlQXN5bmMiLCJtZXNzYWdlSGFuZGxlciIsInJldHB0ciIsIl9fd2JpbmRnZW5fYWRkX3RvX3N0YWNrX3BvaW50ZXIiLCJwdHIwIiwiX193YmluZGdlbl9tYWxsb2MiLCJfX3diaW5kZ2VuX3JlYWxsb2MiLCJsZW4wIiwiaW5zdGFuY2UiLCJrbGFzcyIsIl9hc3NlcnRDbGFzcyIsIk1lc3NhZ2VIYW5kbGVyIiwicjAiLCJyMSIsInN0YWNrX3BvaW50ZXIiLCJsaXN0ZW4iLCJfdG9waWNzIiwiX2NhbGxiYWNrIiwiYWRkQm9ycm93ZWRPYmplY3QiLCJoYW5kbGVFcnJvciIsIl9fd2JpbmRnZW5fZXhuX3N0b3JlIiwiTWVzc2FnZUhhbmRsZXJGaW5hbGl6YXRpb24iLCJfX3diZ19tZXNzYWdlaGFuZGxlcl9mcmVlIiwiTWVzc2FnZUhhbmRsZXIkMSIsInN0YXRpYyIsIk9iamVjdCIsImNyZWF0ZSIsInByb3RvdHlwZSIsIl9fZGVzdHJveV9pbnRvX3JhdyIsImZyZWUiLCJnZXRJbXBvcnRzIiwiaW1wb3J0cyIsIndiZyIsIl9fd2JpbmRnZW5fb2JqZWN0X2Ryb3BfcmVmIiwiX193YmluZGdlbl9jYl9kcm9wIiwiX193YmluZGdlbl9zdHJpbmdfZ2V0IiwiX193YmluZGdlbl9zdHJpbmdfbmV3IiwiX193YmdfbmV3X2FiZGE3NmU4ODNiYThhNWYiLCJfX3diZ19zdGFja182NTgyNzlmZTQ0NTQxY2Y2IiwiX193YmdfZXJyb3JfZjg1MTY2N2FmNzFiY2ZjNiIsImNvbnNvbGUiLCJlcnJvciIsIl9fd2JpbmRnZW5fZnJlZSIsIl9fd2JnX2NsZWFyVGltZW91dF83Njg3N2RiYzAxMGU3ODZkIiwiY2xlYXJUaW1lb3V0IiwiX193Ymdfc2V0VGltZW91dF83NWNiOWI2OTkxYTQwMzFkIiwic2V0VGltZW91dCIsImFyZ3VtZW50cyIsIl9fd2JpbmRnZW5fb2JqZWN0X2Nsb25lX3JlZiIsIl9fd2JnX2ZldGNoXzNhMWJlNTE3NjBlMWY4ZWIiLCJmZXRjaCIsIl9fd2JnX2ZldGNoXzY2MWZmYmEyYTRmMjUxOWMiLCJfX3diZ19pbnN0YW5jZW9mX1Jlc3BvbnNlX2ZiM2E0ZGY2NDhjMTg1OWIiLCJSZXNwb25zZSIsIl9fd2JnX3VybF84ZWMyNTM0Y2RmYWNiMTAzIiwidXJsIiwiX193Ymdfc3RhdHVzX2Q0ODNhNGFjODQ3ZjM4MGEiLCJzdGF0dXMiLCJfX3diZ19oZWFkZXJzXzYwOTM5MjdkYzM1OTkwM2UiLCJoZWFkZXJzIiwiX193YmdfYXJyYXlCdWZmZXJfY2I4ODZlMDZhOWUzNmU0ZCIsImFycmF5QnVmZmVyIiwiX193YmdfdGV4dF9mNjE0NjRkNzgxYjA5OWYwIiwidGV4dCIsIl9fd2JnX25vd19jNjQ0ZGI1MTk0YmU4NDM3Iiwibm93IiwiX193YmdfbmV3d2l0aHN0cmFuZGluaXRfYzQ1ZjBkYzZkYTI2ZmQwMyIsIlJlcXVlc3QiLCJfX3diZ19uZXdfZjFjM2E5YzI1MzNhNTViOCIsIkhlYWRlcnMiLCJfX3diZ19hcHBlbmRfMWJlMWQ2NTFmOWVjZjJlYiIsImFyZzMiLCJhcmc0IiwiYXBwZW5kIiwiX193YmdfY3J5cHRvX2UxZDUzYTFkNzNmYjEwYjgiLCJjcnlwdG8iLCJfX3diaW5kZ2VuX2lzX29iamVjdCIsIl9fd2JnX3Byb2Nlc3NfMDM4YzI2YmY0MmIwOTNmOCIsInByb2Nlc3MiLCJfX3diZ192ZXJzaW9uc19hYjM3MjE4ZDJmMGIyNGE4IiwidmVyc2lvbnMiLCJfX3diZ19ub2RlXzA4MGY0YjE5ZDE1YmMxZmUiLCJub2RlIiwiX193YmluZGdlbl9pc19zdHJpbmciLCJfX3diZ19tc0NyeXB0b182ZTdkM2UxZjkyNjEwY2JiIiwibXNDcnlwdG8iLCJfX3diZ19yZXF1aXJlXzc4YTNkY2ZiZGJhOWNiY2UiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193YmluZGdlbl9pc19mdW5jdGlvbiIsIl9fd2JnX2dldFJhbmRvbVZhbHVlc184MDVmMWMzZDY1OTg4YTVhIiwiZ2V0UmFuZG9tVmFsdWVzIiwiX193YmdfcmFuZG9tRmlsbFN5bmNfNjg5NDU2NGMyYzMzNGM0MiIsInJhbmRvbUZpbGxTeW5jIiwiX193YmdfbmV3bm9hcmdzXzJiOGI2YmQ3NzUzYzc2YmEiLCJGdW5jdGlvbiIsIl9fd2JnX25leHRfYjdkNTMwYzA0ZmQ4YjIxNyIsIl9fd2JnX25leHRfODg1NjBlYzA2YTA5NGRlYSIsIl9fd2JnX2RvbmVfMWViZWMwM2JiZDkxOTg0MyIsIl9fd2JnX3ZhbHVlXzZhYzhkYTVjYzViM2VmZGEiLCJfX3diZ19pdGVyYXRvcl81NWYxMTQ0NDYyMjFhYTVhIiwiX193YmdfZ2V0X2JhZjQ4NTVmOWE5ODYxODYiLCJSZWZsZWN0IiwiX193YmdfY2FsbF85NWQxZWE0ODhkMDNlNGU4IiwiX193YmdfbmV3X2Y5ODc2MzI2MzI4ZjQ1ZWQiLCJfX3diZ19zZWxmX2U3YzFmODI3MDU3ZjY1ODQiLCJzZWxmIiwiX193Ymdfd2luZG93X2EwOWVjNjY0ZTE0YjFiODEiLCJ3aW5kb3ciLCJfX3diZ19nbG9iYWxUaGlzXzg3Y2JiODUwNmZlY2YzYTkiLCJnbG9iYWxUaGlzIiwiX193YmdfZ2xvYmFsX2M4NWE5MjU5ZTYyMWYzZGIiLCJnbG9iYWwiLCJfX3diaW5kZ2VuX2lzX3VuZGVmaW5lZCIsIl9fd2JnX25ld18xNWQzOTY2ZTk5ODFhMTk2IiwiX193YmdfY2FsbF85NDk1ZGU2NmZkYmUwMTZiIiwiX193Ymdfbm93XzkzMTY4NmIxOTVhMTRmOWQiLCJEYXRlIiwiX193YmdfbmV3XzlkM2E5Y2U0MjgyYTE4YTgiLCJzdGF0ZTAiLCJ3YXNtX2JpbmRnZW5fX2NvbnZlcnRfX2Nsb3N1cmVzX19pbnZva2UyX211dF9faDk5MTYxYjM2MWIyNmI0N2QiLCJfX3diZ19hZGFwdGVyXzEwNyIsIl9fd2JnX3Jlc29sdmVfZmQ0MGY4NThkOWRiMWEwNCIsIl9fd2JnX3RoZW5fZWM1ZGI2ZDUwOWViNDc1ZiIsIl9fd2JnX3RoZW5fZjc1MzYyMzMxNmUyODczYSIsIl9fd2JnX2J1ZmZlcl9jZjY1YzA3ZGUzNGI5YTA4IiwiX193YmdfbmV3d2l0aGJ5dGVvZmZzZXRhbmRsZW5ndGhfOWZiMmYxMTM1NWVjYWRmNSIsIl9fd2JnX25ld181MzdiNzM0MWNlOTBiYjMxIiwiX193Ymdfc2V0XzE3NDk5ZThhYTQwMDNlYmQiLCJfX3diZ19sZW5ndGhfMjdhMmFmZThhYjQyYjA5ZiIsIl9fd2JnX25ld3dpdGhsZW5ndGhfYjU2Yzg4MmI1NzgwNTczMiIsIl9fd2JnX3N1YmFycmF5Xzc1MjY2NDliOTFhMjUyYTYiLCJfX3diZ19oYXNfM2ZlZWE4OWQzNGJkN2FkNSIsImhhcyIsIl9fd2JnX3NldF82YWE0NThhNGViZGI2NWNiIiwiX193Ymdfc3RyaW5naWZ5XzAyOWE5NzlkZmI3M2FhMTciLCJfX3diaW5kZ2VuX2RlYnVnX3N0cmluZyIsIl9fd2JpbmRnZW5fdGhyb3ciLCJfX3diaW5kZ2VuX21lbW9yeSIsIl9fd2JpbmRnZW5fY2xvc3VyZV93cmFwcGVyMzMxMSIsIl9fd2JpbmRnZW5fY2xvc3VyZV93cmFwcGVyMzQyNyIsImFzeW5jIiwiaW5pdFdhc20iLCJpbnB1dCIsIlVSTCIsIldlYkFzc2VtYmx5IiwiaW5zdGFudGlhdGVTdHJlYW1pbmciLCJ3YXJuIiwiYnl0ZXMiLCJpbnN0YW50aWF0ZSIsIkluc3RhbmNlIiwibG9hZCIsImV4cG9ydHMiLCJfX3diaW5kZ2VuX3dhc21fbW9kdWxlIiwiX193YmluZGdlbl9zdGFydCIsImZpbmFsaXplSW5pdCIsIl9faW5pdGlhbGl6ZWRJb3RhV2FzbSIsImluaXQiLCJwYXRoIiwiQ29pblR5cGUiLCJvcHRpb25zIiwiY2xpZW50T3B0aW9ucyIsIm1lc3NhZ2VIYW5kbGVyTmV3IiwiX193cmFwIiwic2VuZE1lc3NhZ2UiLCJfYSIsInRvcGljcyIsImNhbGxiYWNrIiwiQ2xpZW50IiwiZ2V0SW5mbyIsInJlc3BvbnNlIiwicGFyc2UiLCJwYXlsb2FkIiwiZ2V0TmV0d29ya0luZm8iLCJiYXNpY091dHB1dElkcyIsInF1ZXJ5UGFyYW1ldGVycyIsImRhdGEiLCJnZXRPdXRwdXQiLCJvdXRwdXRJZCIsImdldE91dHB1dHMiLCJvdXRwdXRJZHMiLCJnZW5lcmF0ZU1uZW1vbmljIiwibW5lbW9uaWNUb0hleFNlZWQiLCJtbmVtb25pYyIsImNvbXB1dGVBbGlhc0lkIiwiY29tcHV0ZU5mdElkIiwiY29tcHV0ZUZvdW5kcnlJZCIsImFsaWFzQWRkcmVzcyIsInNlcmlhbE51bWJlciIsInRva2VuU2NoZW1lS2luZCIsImdlbmVyYXRlQWRkcmVzc2VzIiwic2VjcmV0TWFuYWdlciIsImdlbmVyYXRlQWRkcmVzc2VzT3B0aW9ucyIsImJ1aWxkQW5kUG9zdEJsb2NrIiwiZ2V0VGlwcyIsInBvc3RCbG9jayIsImJsb2NrIiwiZ2V0QmxvY2siLCJibG9ja0lkIiwiZ2V0QmxvY2tNZXRhZGF0YSIsImZpbmRJbnB1dHMiLCJhZGRyZXNzZXMiLCJhbW91bnQiLCJmaW5kT3V0cHV0cyIsImdldExlZGdlck5hbm9TdGF0dXMiLCJpc1NpbXVsYXRvciIsInByZXBhcmVUcmFuc2FjdGlvbiIsInN0b3JlTW5lbW9uaWMiLCJzaWduVHJhbnNhY3Rpb24iLCJwcmVwYXJlZFRyYW5zYWN0aW9uRGF0YSIsInNpZ25hdHVyZVVubG9jayIsImlucHV0U2lnbmluZ0RhdGEiLCJ0cmFuc2FjdGlvbkVzc2VuY2VIYXNoIiwicmVtYWluZGVyRGF0YSIsInBvc3RCbG9ja1BheWxvYWQiLCJwYXJzZUJlY2gzMkFkZHJlc3MiLCJhZGRyZXNzIiwiZ2V0Tm9kZSIsImdldE5ldHdvcmtJZCIsImdldEJlY2gzMkhycCIsImdldE1pblBvd1Njb3JlIiwiZ2V0VGlwc0ludGVydmFsIiwiZ2V0VG9rZW5TdXBwbHkiLCJnZXRQcm90b2NvbFBhcmFtZXRlcnMiLCJ0b2tlblN1cHBseSIsImdldExvY2FsUG93IiwiZ2V0RmFsbGJhY2tUb0xvY2FsUG93IiwiZ2V0SGVhbHRoIiwiZ2V0Tm9kZUluZm8iLCJhdXRoIiwiZ2V0UGVlcnMiLCJwb3N0QmxvY2tSYXciLCJnZXRCbG9ja1JhdyIsImdldE1pbGVzdG9uZUJ5SWQiLCJtaWxlc3RvbmVJZCIsImdldFV0eG9DaGFuZ2VzQnlJZCIsImdldE1pbGVzdG9uZUJ5SW5kZXgiLCJpbmRleCIsImdldFV0eG9DaGFuZ2VzQnlJbmRleCIsImdldFJlY2VpcHRzIiwiZ2V0UmVjZWlwdHNNaWdyYXRlZEF0IiwibWlsZXN0b25lSW5kZXgiLCJnZXRUcmVhc3VyeSIsImdldEluY2x1ZGVkQmxvY2siLCJ0cmFuc2FjdGlvbklkIiwiZ2V0SW5jbHVkZWRCbG9ja01ldGFkYXRhIiwiYmVjaDMyVG9IZXgiLCJiZWNoMzIiLCJoZXhUb0JlY2gzMiIsImhleCIsImJlY2gzMkhycCIsImFsaWFzSWRUb0JlY2gzMiIsImFsaWFzSWQiLCJuZnRJZFRvQmVjaDMyIiwibmZ0SWQiLCJoZXhQdWJsaWNLZXlUb0JlY2gzMkFkZHJlc3MiLCJpc0FkZHJlc3NWYWxpZCIsImFsaWFzT3V0cHV0SWRzIiwiYWxpYXNPdXRwdXRJZCIsIm5mdE91dHB1dElkcyIsIm5mdE91dHB1dElkIiwiZm91bmRyeU91dHB1dElkcyIsImZvdW5kcnlPdXRwdXRJZCIsImZvdW5kcnlJZCIsInRyeUdldE91dHB1dHMiLCJmaW5kQmxvY2tzIiwiYmxvY2tJZHMiLCJyZXRyeSIsInJldHJ5VW50aWxJbmNsdWRlZCIsImludGVydmFsIiwibWF4QXR0ZW1wdHMiLCJjb25zb2xpZGF0ZUZ1bmRzIiwicmVhdHRhY2giLCJyZWF0dGFjaFVuY2hlY2tlZCIsInByb21vdGUiLCJwcm9tb3RlVW5jaGVja2VkIiwidW5oZWFsdGh5Tm9kZXMiLCJidWlsZEJhc2ljT3V0cHV0IiwiYnVpbGRBbGlhc091dHB1dCIsImJ1aWxkRm91bmRyeU91dHB1dCIsImJ1aWxkTmZ0T3V0cHV0IiwiY2xlYXJMaXN0ZW5lcnMiLCJMZWRnZXJEZXZpY2VUeXBlIiwiTmV0d29yayIsImRlZmF1bHRMb2dnZXJDb25maWciLCJjb2xvckVuYWJsZWQiLCJsZXZlbEZpbHRlciIsImluaXRMb2dnZXIiLCJjb25maWciLCJfY29uZmlnIiwiQWxsb3dhbmNlIiwiR0FTX0JVREdFVCIsIkJpZ0ludGVnZXIiLCJUQVJHRVRfQ09OVFJBQ1RTIiwiQ09OVFJBQ1RfRlVOQ1RJT05TIiwiZGVjaW1hbFRvSGV4IiwibnVtYmVyIiwicHJlZml4IiwiTDFUb0wyIiwic2V0dXAiLCJfY2xpZW50Iiwibm9kZXMiLCJsb2NhbFBvdyIsIl9hZGRHYXNCdWRnZXQiLCJyYXdBbW91bnQiLCJhZGQiLCJfZW5jb2RlU21hcnRDb250cmFjdFBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwiZW5jb2RlZFBhcmFtZXRlcnMiLCJXcml0ZVN0cmVhbSIsIndyaXRlVUludDMyIiwicGFyYW1ldGVyc18xIiwiX2kiLCJwYXJhbWV0ZXIiLCJrZXkiLCJrZXlCeXRlcyIsIkNvbnZlcnRlciIsInV0ZjhUb0J5dGVzIiwid3JpdGVVSW50MTYiLCJ3cml0ZUJ5dGVzIiwidmFsdWVCeXRlcyIsImhleFRvQnl0ZXMiLCJmaW5hbEJ5dGVzIiwiX2dldFNlY3JldE1hbmFnZXIiLCJfbW5lbW9uaWMiLCJzZXRNbmVtb25pYyIsImdldE91dHB1dEZvclNlbmQiLCJ0YXJnZXRBbW91bnQiLCJnZXRVbnNwZW50T3V0cHV0cyIsIm91dHB1dHMiLCJvdXRwdXRzXzEiLCJvdXRwdXRSZXNwIiwib3V0cHV0IiwiZ2VxIiwiZ2V0T3V0cHV0Rm9yTmZ0U2VuZCIsImdldE5mdE91dHB1dHMiLCJvdXRwdXRzXzIiLCJfZnJvbUFkZHJlc3NCZWNoMzIiLCJvdXRwdXRJZHNSZXNwb25zZSIsIl9iIiwiYWRkcmVzc091dHB1dHMiLCJsb2ciLCJoYXNFeHBpcmF0aW9uIiwiaGFzVGltZWxvY2siLCJoYXNTdG9yYWdlRGVwb3NpdFJldHVybiIsImZpbHRlciIsIm8iLCJtZXRhZGF0YSIsImlzU3BlbnQiLCJwcmVwYXJlQWRkcmVzcyIsImFjY291bnRJbmRleCIsInJhbmdlIiwic3RhcnQiLCJlbmQiLCJfZCIsIl9jIiwiX2Zyb21BZGRyZXNzSGV4IiwiX2VuY29kZUFkZHJlc3MiLCJlbmNvZGVkQWRkcmVzcyIsIndyaXRlVUludDgiLCJhZGRyZXNzQnl0ZXMiLCJmaW5hbEhleCIsIl9nZXRMYXllcjJNZXRhZGF0YUZvclRyYW5zZmVyIiwibGF5ZXIyQWRkcmVzcyIsIm5hdGl2ZVRva2VuSWQiLCJzdXJwbHVzIiwibWV0YWRhdGFTdHJlYW0iLCJ3cml0ZVVJbnQ2NCIsInRvTG93ZXJDYXNlIiwic21hcnRDb250cmFjdFBhcmFtZXRlcnMiLCJlbnRyaWVzIiwiYWxsb3dhbmNlIiwiX2VuY29kZUFsbG93YW5jZSIsInRva2VuQnVmZmVyIiwiU2V0IiwidG9rZW5JZEJ5dGVzIiwic3Vic3RyaW5nIiwid3JpdGVVSW50MjU2IiwidG9rZW5CdWZmZXJCeXRlcyIsIl9nZXRBbW91bnRGcm9tVHJhbnNhY3Rpb25EZXRhaWxzIiwiQmlnSW50IiwiZ2V0T3V0cHV0T3B0aW9ucyIsInNlbmRlckFkZHJlc3MiLCJyZWNpcGllbnRBZGRyZXNzIiwiZXh0IiwidGFnIiwiZ2lmdFN0b3JhZ2VEZXBvc2l0IiwibGF5ZXIyUGFyYW1ldGVycyIsIm5mdE91dHB1dCIsImV4cGlyYXRpb25EYXRlIiwidW5peFRpbWUiLCJkYXRlIiwiTWF0aCIsInJvdW5kIiwiZ2V0VGltZSIsImJpZ0Ftb3VudCIsInV0ZjhUb0hleCIsIm5ldHdvcmtBZGRyZXNzIiwiYXNzZXRzIiwibmF0aXZlVG9rZW5zIiwiaWQiLCJmZWF0dXJlcyIsInVubG9ja0NvbmRpdGlvbnMiLCJpbW11dGFibGVGZWF0dXJlcyIsInNlbmRUcmFuc2FjdGlvbiIsInRvQWRkciIsIm91dHB1dERldGFpbCIsInRvdGFsRnVuZHMiLCJhbW91bnRUb1NlbmQiLCJpbnB1dHMiLCJ0cmFuc2FjdGlvbk91dHB1dEluZGV4Iiwib3V0cHV0SW5kZXgiLCJwdWJLZXlIYXNoIiwiYmFzaWNPdXRwdXQiLCJndCIsInJlbWFpbmluZ0Z1bmQiLCJtaW51cyIsInJlbWFpbmRlckJhc2ljT3V0cHV0IiwiYmxvY2tPcHRpb24iLCJ0cmFuc2FjdGlvblBheWxvYWQiLCJlZDJiZWNoMzIiLCJwYXJzZUxheWVyMk1ldGFkYXRhRm9yVHJhbnNmZXIiLCJtZXRhZGF0YUhleCIsInJlYWRTdHJlYW0iLCJSZWFkU3RyZWFtIiwic2VuZGVyQ29udHJhY3QiLCJyZWFkVUludDMyIiwidGFyZ2V0Q29udHJhY3QiLCJjb250cmFjdEZ1bmN0aW9uIiwiZ2FzQnVkZ2V0IiwicmVhZFVJbnQ2NCIsImV0aGVyZXVtQWRkcmVzcyIsIl9wYXJzZVNtYXJ0Q29udHJhY3RQYXJhbWV0ZXJzIiwiX3BhcnNlQWxsb3dhbmNlIiwiYmFzZVRva2VuQW1vdW50Iiwic21hcnRDb250cmFjdFBhcmFtZXRlcnNBbW91bnQiLCJrZXlMZW5ndGgiLCJyZWFkVUludDE2IiwicmVhZEJ5dGVzIiwidmFsdWVMZW5ndGgiLCJieXRlc1RvVXRmOCIsImJ5dGVzVG9IZXgiLCJyZWFkVUludDgiLCJ0b2tlbkFtb3VudCIsInRva2VuIiwidG9rZW5JZCIsInJlYWRVSW50MjU2IiwibDF0b2wyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7c0dBa0hPLFNBQVNBLEVBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTlDLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxF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UUFBcEN0USxFQUFBZ0ksRUFBaUJzSSxVQUFtQixJQUFBdFEsRUFBQUEsRUFBQWtJLEVBQWFvSSxHQUFnQixHQUNqRkMsaUJBQTBELFFBQXhDekYsRUFBQTdDLEVBQW1Cc0ksVUFBcUIsSUFBQXpGLEVBQUFBLEVBQUE1QyxFQUFhcUksR0FBa0IsR0FDekZDLFVBQVdBLEVBQVUxYyxXQUNyQjRjLGdCQUFlQSxFQUNmRyxnQkFBaUIvRCxhQUFBLEVBQUFBLEVBQVcrRCxnQkFDNUJuQyxhQUFjNUIsYUFBQSxFQUFBQSxFQUFXNEIsZUFJdkJyRyxFQUE2Qi9RLFVBQUFxWiw4QkFBckMsU0FBc0NULEdBSWxDLElBSEEsSUFBTVksRUFBZ0NaLEVBQVdHLFdBQVcsb0JBQ3REekQsRUFBa0QsQ0FBQSxFQUUvQ3BJLEVBQVEsRUFBR0EsRUFBUXNNLEVBQStCdE0sSUFBUyxDQUNoRSxJQUFNdU0sRUFBWWIsRUFBV2MsV0FBVyxhQUNsQzFILEVBQVc0RyxFQUFXZSxVQUFVLFdBQVlGLEdBRTVDRyxFQUFjaEIsRUFBV0csV0FBVyxlQUNwQzFHLEVBQWF1RyxFQUFXZSxVQUFVLGFBQWNDLEdBRWhEN0gsRUFBTUUsRUFBVTRILFlBQVk3SCxHQUM1QnpiLEVBQVEwYixFQUFVNkgsV0FBV3pILEdBRW5DaUQsRUFBd0J2RCxHQUFPeGIsQ0FDbEMsQ0FFRCxPQUFPK2UsR0FHSHZFLEVBQWUvUSxVQUFBc1osZ0JBQXZCLFNBQXdCVixHQUdwQixHQUZrQkEsRUFBV21CLFVBQVUsZUFFckJ4SixFQUFVb0YsSUFBSyxDQUM3QixJQUFNNEQsRUFBa0JYLEVBQVdPLFdBQVcsbUJBQW1CM2MsV0FDakVvYyxFQUFXYyxXQUFXLDBCQUl0QixJQUhBLElBQU1NLEVBQWNwQixFQUFXYyxXQUFXLGVBQ3BDdEMsRUFBb0MsR0FFakM2QyxFQUFRLEVBQUdBLEVBQVFELEVBQWFDLElBQVMsQ0FDOUMsSUFBTUMsRUFBVWpJLEVBQVU2SCxXQUFXbEIsRUFBV2UsVUFBVSxVRnRkcEMsS0V1ZGhCNU8sRUFBUzZOLEVBQVd1QixZQUFZLGVBQWUzZCxXQUNyRDRhLEVBQWE1ZSxLQUFLLENBQUUwaEIsUUFBT0EsRUFBRW5QLE9BQU1BLEdBQ3RDLENBRUQsTUFBTyxDQUNId08sZ0JBQWVBLEVBQ2ZuQyxhQUFZQSxFQUVuQixHQUtOckcsQ0FBRCxLQUdBOUwsT0FBT21WLE9BQVN2YiIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDddfQ==
