/**
                       * @license
                       * author: TanglePay
                       * tanglepaysdk-l1tol2.js v0.1.6
                       * Released under the Apache-2.0 license.
                       */
this.l12l2=function(e,t){"use strict";function n(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function r(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}let a;const s=new Array(128).fill(void 0);function o(e){return s[e]}s.push(void 0,null,!0,!1);let i=s.length;function u(e){const t=o(e);return function(e){e<132||(s[e]=i,i=e)}(e),t}let c=0,d=null;function l(){return null!==d&&0!==d.byteLength||(d=new Uint8Array(a.memory.buffer)),d}const f=new TextEncoder("utf-8"),p="function"==typeof f.encodeInto?function(e,t){return f.encodeInto(e,t)}:function(e,t){const n=f.encode(e);return t.set(n),{read:e.length,written:n.length}};function h(e,t,n){if(void 0===n){const n=f.encode(e),r=t(n.length);return l().subarray(r,r+n.length).set(n),c=n.length,r}let r=e.length,a=t(r);const s=l();let o=0;for(;o<r;o++){const t=e.charCodeAt(o);if(t>127)break;s[a+o]=t}if(o!==r){0!==o&&(e=e.slice(o)),a=n(a,r,r=o+3*e.length);const t=l().subarray(a+o,a+r);o+=p(e,t).written}return c=o,a}function g(e){return null==e}let _=null;function b(){return null!==_&&0!==_.byteLength||(_=new Int32Array(a.memory.buffer)),_}const w=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});function y(e,t){return w.decode(l().subarray(e,e+t))}function v(e){i===s.length&&s.push(s.length+1);const t=i;return i=s[t],s[t]=e,t}function m(e){const t=typeof e;if("number"==t||"boolean"==t||null==e)return`${e}`;if("string"==t)return`"${e}"`;if("symbol"==t){const t=e.description;return null==t?"Symbol":`Symbol(${t})`}if("function"==t){const t=e.name;return"string"==typeof t&&t.length>0?`Function(${t})`:"Function"}if(Array.isArray(e)){const t=e.length;let n="[";t>0&&(n+=m(e[0]));for(let r=1;r<t;r++)n+=", "+m(e[r]);return n+="]",n}const n=/\[object ([^\]]+)\]/.exec(toString.call(e));let r;if(!(n.length>1))return toString.call(e);if(r=n[1],"Object"==r)try{return"Object("+JSON.stringify(e)+")"}catch(e){return"Object"}return e instanceof Error?`${e.name}: ${e.message}\n${e.stack}`:r}w.decode();const S=new FinalizationRegistry((e=>{a.__wbindgen_export_2.get(e.dtor)(e.a,e.b)}));function I(e,t,n,r){const s={a:e,b:t,cnt:1,dtor:n},o=(...e)=>{s.cnt++;const t=s.a;s.a=0;try{return r(t,s.b,...e)}finally{0==--s.cnt?(a.__wbindgen_export_2.get(s.dtor)(t,s.b),S.unregister(s)):s.a=t}};return o.original=s,S.register(o,s,s),o}function O(e,t){a._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__had9d5d30c8b835af(e,t)}function k(e,t,n){a._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hbc2f3d574014e74d(e,t,v(n))}function M(e,t){try{const s=a.__wbindgen_add_to_stack_pointer(-16),o=h(e,a.__wbindgen_malloc,a.__wbindgen_realloc),i=c;!function(e,t){if(!(e instanceof t))throw new Error(`expected instance of ${t.name}`);e.ptr}(t,x),a.sendMessageAsync(s,o,i,t.ptr);var n=b()[s/4+0],r=b()[s/4+1];if(b()[s/4+2])throw u(r);return u(n)}finally{a.__wbindgen_add_to_stack_pointer(16)}}let N=128;function H(e,t){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.listen(r,v(e),function(e){if(1==N)throw new Error("out of js stack");return s[--N]=e,N}(t));var n=b()[r/4+0];if(b()[r/4+1])throw u(n)}finally{a.__wbindgen_add_to_stack_pointer(16),s[N++]=void 0}}function B(e,t){try{return e.apply(this,t)}catch(e){a.__wbindgen_exn_store(v(e))}}const T=new FinalizationRegistry((e=>a.__wbg_messagehandler_free(e)));let x=class e{static __wrap(t){const n=Object.create(e.prototype);return n.ptr=t,T.register(n,n.ptr,n),n}__destroy_into_raw(){const e=this.ptr;return this.ptr=0,T.unregister(this),e}free(){const e=this.__destroy_into_raw();a.__wbg_messagehandler_free(e)}};function J(){const e={wbg:{}};return e.wbg.__wbindgen_object_drop_ref=function(e){u(e)},e.wbg.__wbindgen_cb_drop=function(e){const t=u(e).original;if(1==t.cnt--)return t.a=0,!0;return!1},e.wbg.__wbindgen_string_get=function(e,t){const n=o(t),r="string"==typeof n?n:void 0;var s=g(r)?0:h(r,a.__wbindgen_malloc,a.__wbindgen_realloc),i=c;b()[e/4+1]=i,b()[e/4+0]=s},e.wbg.__wbindgen_string_new=function(e,t){return v(y(e,t))},e.wbg.__wbg_new_abda76e883ba8a5f=function(){return v(new Error)},e.wbg.__wbg_stack_658279fe44541cf6=function(e,t){const n=h(o(t).stack,a.__wbindgen_malloc,a.__wbindgen_realloc),r=c;b()[e/4+1]=r,b()[e/4+0]=n},e.wbg.__wbg_error_f851667af71bcfc6=function(e,t){try{console.error(y(e,t))}finally{a.__wbindgen_free(e,t)}},e.wbg.__wbg_clearTimeout_76877dbc010e786d=function(e){return v(clearTimeout(u(e)))},e.wbg.__wbg_setTimeout_75cb9b6991a4031d=function(){return B((function(e,t){return v(setTimeout(o(e),t))}),arguments)},e.wbg.__wbindgen_object_clone_ref=function(e){return v(o(e))},e.wbg.__wbg_fetch_3a1be51760e1f8eb=function(e){return v(fetch(o(e)))},e.wbg.__wbg_fetch_661ffba2a4f2519c=function(e,t){return v(o(e).fetch(o(t)))},e.wbg.__wbg_instanceof_Response_fb3a4df648c1859b=function(e){let t;try{t=o(e)instanceof Response}catch{t=!1}return t},e.wbg.__wbg_url_8ec2534cdfacb103=function(e,t){const n=h(o(t).url,a.__wbindgen_malloc,a.__wbindgen_realloc),r=c;b()[e/4+1]=r,b()[e/4+0]=n},e.wbg.__wbg_status_d483a4ac847f380a=function(e){return o(e).status},e.wbg.__wbg_headers_6093927dc359903e=function(e){return v(o(e).headers)},e.wbg.__wbg_arrayBuffer_cb886e06a9e36e4d=function(){return B((function(e){return v(o(e).arrayBuffer())}),arguments)},e.wbg.__wbg_text_f61464d781b099f0=function(){return B((function(e){return v(o(e).text())}),arguments)},e.wbg.__wbg_now_c644db5194be8437=function(e){return o(e).now()},e.wbg.__wbg_newwithstrandinit_c45f0dc6da26fd03=function(){return B((function(e,t,n){return v(new Request(y(e,t),o(n)))}),arguments)},e.wbg.__wbg_new_f1c3a9c2533a55b8=function(){return B((function(){return v(new Headers)}),arguments)},e.wbg.__wbg_append_1be1d651f9ecf2eb=function(){return B((function(e,t,n,r,a){o(e).append(y(t,n),y(r,a))}),arguments)},e.wbg.__wbg_crypto_e1d53a1d73fb10b8=function(e){return v(o(e).crypto)},e.wbg.__wbindgen_is_object=function(e){const t=o(e);return"object"==typeof t&&null!==t},e.wbg.__wbg_process_038c26bf42b093f8=function(e){return v(o(e).process)},e.wbg.__wbg_versions_ab37218d2f0b24a8=function(e){return v(o(e).versions)},e.wbg.__wbg_node_080f4b19d15bc1fe=function(e){return v(o(e).node)},e.wbg.__wbindgen_is_string=function(e){return"string"==typeof o(e)},e.wbg.__wbg_msCrypto_6e7d3e1f92610cbb=function(e){return v(o(e).msCrypto)},e.wbg.__wbg_require_78a3dcfbdba9cbce=function(){return B((function(){return v(module.require)}),arguments)},e.wbg.__wbindgen_is_function=function(e){return"function"==typeof o(e)},e.wbg.__wbg_getRandomValues_805f1c3d65988a5a=function(){return B((function(e,t){o(e).getRandomValues(o(t))}),arguments)},e.wbg.__wbg_randomFillSync_6894564c2c334c42=function(){return B((function(e,t,n){var r,a;o(e).randomFillSync((r=t,a=n,l().subarray(r/1,r/1+a)))}),arguments)},e.wbg.__wbg_newnoargs_2b8b6bd7753c76ba=function(e,t){return v(new Function(y(e,t)))},e.wbg.__wbg_next_b7d530c04fd8b217=function(e){return v(o(e).next)},e.wbg.__wbg_next_88560ec06a094dea=function(){return B((function(e){return v(o(e).next())}),arguments)},e.wbg.__wbg_done_1ebec03bbd919843=function(e){return o(e).done},e.wbg.__wbg_value_6ac8da5cc5b3efda=function(e){return v(o(e).value)},e.wbg.__wbg_iterator_55f114446221aa5a=function(){return v(Symbol.iterator)},e.wbg.__wbg_get_baf4855f9a986186=function(){return B((function(e,t){return v(Reflect.get(o(e),o(t)))}),arguments)},e.wbg.__wbg_call_95d1ea488d03e4e8=function(){return B((function(e,t){return v(o(e).call(o(t)))}),arguments)},e.wbg.__wbg_new_f9876326328f45ed=function(){return v(new Object)},e.wbg.__wbg_self_e7c1f827057f6584=function(){return B((function(){return v(self.self)}),arguments)},e.wbg.__wbg_window_a09ec664e14b1b81=function(){return B((function(){return v(window.window)}),arguments)},e.wbg.__wbg_globalThis_87cbb8506fecf3a9=function(){return B((function(){return v(globalThis.globalThis)}),arguments)},e.wbg.__wbg_global_c85a9259e621f3db=function(){return B((function(){return v(global.global)}),arguments)},e.wbg.__wbindgen_is_undefined=function(e){return void 0===o(e)},e.wbg.__wbg_new_15d3966e9981a196=function(e,t){return v(new Error(y(e,t)))},e.wbg.__wbg_call_9495de66fdbe016b=function(){return B((function(e,t,n){return v(o(e).call(o(t),o(n)))}),arguments)},e.wbg.__wbg_now_931686b195a14f9d=function(){return Date.now()},e.wbg.__wbg_new_9d3a9ce4282a18a8=function(e,t){try{var n={a:e,b:t};const r=new Promise(((e,t)=>{const r=n.a;n.a=0;try{return function(e,t,n,r){a.wasm_bindgen__convert__closures__invoke2_mut__h99161b361b26b47d(e,t,v(n),v(r))}(r,n.b,e,t)}finally{n.a=r}}));return v(r)}finally{n.a=n.b=0}},e.wbg.__wbg_resolve_fd40f858d9db1a04=function(e){return v(Promise.resolve(o(e)))},e.wbg.__wbg_then_ec5db6d509eb475f=function(e,t){return v(o(e).then(o(t)))},e.wbg.__wbg_then_f753623316e2873a=function(e,t,n){return v(o(e).then(o(t),o(n)))},e.wbg.__wbg_buffer_cf65c07de34b9a08=function(e){return v(o(e).buffer)},e.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5=function(e,t,n){return v(new Uint8Array(o(e),t>>>0,n>>>0))},e.wbg.__wbg_new_537b7341ce90bb31=function(e){return v(new Uint8Array(o(e)))},e.wbg.__wbg_set_17499e8aa4003ebd=function(e,t,n){o(e).set(o(t),n>>>0)},e.wbg.__wbg_length_27a2afe8ab42b09f=function(e){return o(e).length},e.wbg.__wbg_newwithlength_b56c882b57805732=function(e){return v(new Uint8Array(e>>>0))},e.wbg.__wbg_subarray_7526649b91a252a6=function(e,t,n){return v(o(e).subarray(t>>>0,n>>>0))},e.wbg.__wbg_has_3feea89d34bd7ad5=function(){return B((function(e,t){return Reflect.has(o(e),o(t))}),arguments)},e.wbg.__wbg_set_6aa458a4ebdb65cb=function(){return B((function(e,t,n){return Reflect.set(o(e),o(t),o(n))}),arguments)},e.wbg.__wbg_stringify_029a979dfb73aa17=function(){return B((function(e){return v(JSON.stringify(o(e)))}),arguments)},e.wbg.__wbindgen_debug_string=function(e,t){const n=h(m(o(t)),a.__wbindgen_malloc,a.__wbindgen_realloc),r=c;b()[e/4+1]=r,b()[e/4+0]=n},e.wbg.__wbindgen_throw=function(e,t){throw new Error(y(e,t))},e.wbg.__wbindgen_memory=function(){return v(a.memory)},e.wbg.__wbindgen_closure_wrapper3311=function(e,t,n){return v(I(e,t,719,O))},e.wbg.__wbindgen_closure_wrapper3427=function(e,t,n){return v(I(e,t,792,k))},e}async function A(e){const t=J();("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:r}=await async function(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}(await e,t);return function(e,t){return a=e.exports,A.__wbindgen_wasm_module=t,_=null,d=null,a.__wbindgen_start(),a}(n,r)}let U=!1;function P(e){return U?Promise.resolve(a):A(e||"client_wasm_bg.wasm").then((()=>(U=!0,a)))}var C,F=function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))},L=function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},R=function(){function e(e){this.messageHandler=function(e){try{const o=a.__wbindgen_add_to_stack_pointer(-16);var t=g(e)?0:h(e,a.__wbindgen_malloc,a.__wbindgen_realloc),n=c;a.messageHandlerNew(o,t,n);var r=b()[o/4+0],s=b()[o/4+1];if(b()[o/4+2])throw u(s);return x.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}(JSON.stringify(e))}return e.prototype.sendMessage=function(e){return F(this,void 0,void 0,(function(){return L(this,(function(t){return[2,M(JSON.stringify(e),this.messageHandler)]}))}))},e.prototype.listen=function(e,t){return F(this,void 0,void 0,(function(){return L(this,(function(n){return[2,H(e,t,this.messageHandler)]}))}))},e}(),E=function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))},W=function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,i[0]&&(o=0)),o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},j=function(){function e(e){this.messageHandler=new R(e)}return e.prototype.getInfo=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getInfo"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getNetworkInfo=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNetworkInfo"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.basicOutputIds=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"basicOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getOutput=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getOutput",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getOutputs=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getOutputs",data:{outputIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.generateMnemonic=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"generateMnemonic"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.mnemonicToHexSeed=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"mnemonicToHexSeed",data:{mnemonic:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeAliasId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeAliasId",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeNftId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeNftId",data:{outputId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.computeFoundryId=function(e,t,n){return E(this,void 0,void 0,(function(){var r;return W(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"computeFoundryId",data:{aliasAddress:e,serialNumber:t,tokenSchemeKind:n}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.generateAddresses=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"generateAddresses",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.buildAndPostBlock=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildAndPostBlock",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getTips=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTips"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.postBlock=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlock",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlock=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlock",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlockMetadata=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlockMetadata",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.findInputs=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"findInputs",data:{addresses:e,amount:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.findOutputs=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"findOutputs",data:{outputIds:e,addresses:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getLedgerNanoStatus=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getLedgerNanoStatus",data:{isSimulator:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.prepareTransaction=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"prepareTransaction",data:{secretManager:e,options:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.storeMnemonic=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"storeMnemonic",data:{secretManager:e,mnemonic:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.signTransaction=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"signTransaction",data:{secretManager:e,preparedTransactionData:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.signatureUnlock=function(e,t,n){return E(this,void 0,void 0,(function(){var r;return W(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"signatureUnlock",data:{secretManager:e,inputSigningData:t,transactionEssenceHash:n,remainderData:void 0}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.postBlockPayload=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlockPayload",data:{payload:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.parseBech32Address=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"parseBech32Address",data:{address:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.blockId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"blockId",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getNode=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNode"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getNetworkId=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNetworkId"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getBech32Hrp=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBech32Hrp"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getMinPowScore=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMinPowScore"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getTipsInterval=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTipsInterval"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getTokenSupply=function(){return E(this,void 0,void 0,(function(){return W(this,(function(e){switch(e.label){case 0:return[4,this.getProtocolParameters()];case 1:return[2,e.sent().tokenSupply]}}))}))},e.prototype.getProtocolParameters=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getProtocolParameters"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getLocalPow=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getLocalPow"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getFallbackToLocalPow=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getFallbackToLocalPow"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getHealth=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getHealth",data:{url:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getNodeInfo=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"getNodeInfo",data:{url:e,auth:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.getPeers=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getPeers"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.postBlockRaw=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"postBlockRaw",data:{block:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getBlockRaw=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getBlockRaw",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getMilestoneById=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMilestoneById",data:{milestoneId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getUtxoChangesById=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getUtxoChangesById",data:{milestoneId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getMilestoneByIndex=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getMilestoneByIndex",data:{index:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getUtxoChangesByIndex=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getUtxoChangesByIndex",data:{index:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getReceipts=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getReceipts"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getReceiptsMigratedAt=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getReceiptsMigratedAt",data:{milestoneIndex:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getTreasury=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"getTreasury"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.getIncludedBlock=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getIncludedBlock",data:{transactionId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.getIncludedBlockMetadata=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"getIncludedBlockMetadata",data:{transactionId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.bech32ToHex=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"bech32ToHex",data:{bech32:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.hexToBech32=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"hexToBech32",data:{hex:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.aliasIdToBech32=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasIdToBech32",data:{aliasId:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.nftIdToBech32=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftIdToBech32",data:{nftId:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.hexPublicKeyToBech32Address=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"hexPublicKeyToBech32Address",data:{hex:e,bech32Hrp:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.isAddressValid=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"isAddressValid",data:{address:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.aliasOutputIds=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.aliasOutputId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"aliasOutputId",data:{aliasId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.nftOutputIds=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.nftOutputId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"nftOutputId",data:{nftId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.foundryOutputIds=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"foundryOutputIds",data:{queryParameters:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.foundryOutputId=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"foundryOutputId",data:{foundryId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.tryGetOutputs=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"tryGetOutputs",data:{outputIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.findBlocks=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"findBlocks",data:{blockIds:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.retry=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"retry",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.retryUntilIncluded=function(e,t,n){return E(this,void 0,void 0,(function(){var r;return W(this,(function(a){switch(a.label){case 0:return[4,this.messageHandler.sendMessage({name:"retryUntilIncluded",data:{blockId:e,interval:t,maxAttempts:n}})];case 1:return r=a.sent(),[2,JSON.parse(r).payload]}}))}))},e.prototype.consolidateFunds=function(e,t){return E(this,void 0,void 0,(function(){var n;return W(this,(function(r){switch(r.label){case 0:return[4,this.messageHandler.sendMessage({name:"consolidateFunds",data:{secretManager:e,generateAddressesOptions:t}})];case 1:return n=r.sent(),[2,JSON.parse(n).payload]}}))}))},e.prototype.reattach=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"reattach",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.reattachUnchecked=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"reattachUnchecked",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.promote=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"promote",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.promoteUnchecked=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"promoteUnchecked",data:{blockId:e}})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.unhealthyNodes=function(){return E(this,void 0,void 0,(function(){var e;return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"unhealthyNodes"})];case 1:return e=t.sent(),[2,JSON.parse(e).payload]}}))}))},e.prototype.buildBasicOutput=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildBasicOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildAliasOutput=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildAliasOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildFoundryOutput=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildFoundryOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.buildNftOutput=function(e){return E(this,void 0,void 0,(function(){var t;return W(this,(function(n){switch(n.label){case 0:return[4,this.messageHandler.sendMessage({name:"buildNftOutput",data:e})];case 1:return t=n.sent(),[2,JSON.parse(t).payload]}}))}))},e.prototype.listen=function(e,t){return E(this,void 0,void 0,(function(){return W(this,(function(n){return[2,this.messageHandler.listen(e,t)]}))}))},e.prototype.clearListeners=function(e){return E(this,void 0,void 0,(function(){return W(this,(function(t){switch(t.label){case 0:return[4,this.messageHandler.sendMessage({name:"clearListeners",data:{topics:e}})];case 1:return t.sent(),[2]}}))}))},e}();!function(e){e[e.IOTA=4218]="IOTA",e[e.Shimmer=4219]="Shimmer"}(C||(C={}));var q,D,G={colorEnabled:!0,name:"./client.log",levelFilter:"debug"},$=function(e){return void 0===e&&(e=G),t=JSON.stringify(e),void a.initLogger(v(t));var t};!function(e){e.LedgerNanoS="ledgerNanoS",e.LedgerNanoX="ledgerNanoX",e.LedgerNanoSPlus="ledgerNanoSPlus"}(q||(q={})),function(e){e[e.Mainnet=0]="Mainnet",e[e.Testnet=1]="Testnet"}(D||(D={}));var K,V=e(5e5);!function(e){e[e.Set=0]="Set",e[e.NotSet=255]="NotSet"}(K||(K={}));var z={1011572226:"Accounts"},X={603251617:"transferAllowanceTo"};function Q(e,t){return void 0===t&&(t=!1),t?"0x"+e.toString(16):e.toString(16)}var Y=new(function(){function a(){}return a.prototype.setup=function(e){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,P(e||"./client_wasm_bg.wasm")];case 1:return t.sent(),[4,$()];case 2:return t.sent(),this._client=new j({nodes:["https://api.testnet.shimmer.network"],localPow:!0}),[2]}}))}))},a.prototype._addGasBudget=function(t){return e(t).add(V).toString()},a.prototype._encodeSmartContractParameters=function(e){var n=new t.WriteStream;n.writeUInt32("parametersLength",e.length);for(var r=0,a=e;r<a.length;r++){var s=a[r],o=s[0],i=s[1],u=t.Converter.utf8ToBytes(o);n.writeUInt16("keyLength",o.length),n.writeBytes("keyBytes",u.length,u);var c=t.Converter.hexToBytes(i);n.writeUInt32("valueLength",c.length),n.writeBytes("valueBytes",c.length,c)}return n.finalBytes()},a.prototype._getSecretManager=function(){return{mnemonic:this._mnemonic}},a.prototype.setMnemonic=function(e){this._mnemonic=e},a.prototype.getOutputForSend=function(t){return n(this,void 0,void 0,(function(){var n,a,s,o,i,u;return r(this,(function(r){switch(r.label){case 0:return n=e(t),[4,this.getUnspentOutputs()];case 1:if(!(a=r.sent()))return[2];for(s=0,o=a;s<o.length;s++)if(i=o[s],u=i.output,e(u.amount).geq(n))return[2,i];return[2,void 0]}}))}))},a.prototype.getOutputForNftSend=function(e){return n(this,void 0,void 0,(function(){var t,n,a,s;return r(this,(function(r){switch(r.label){case 0:return[4,this.getNftOutputs()];case 1:if(!(t=r.sent()))return[2];for(n=0,a=t;n<a.length;n++)if((s=a[n]).output.nftId===e)return[2,s];return[2]}}))}))},a.prototype.getNftOutputs=function(){var e;return n(this,void 0,void 0,(function(){var t,n;return r(this,(function(r){switch(r.label){case 0:return this._client?[4,this._client.nftOutputIds([{address:null!==(e=this._fromAddressBech32)&&void 0!==e?e:""}])]:[2];case 1:return t=r.sent(),[4,this._client.getOutputs(t)];case 2:return n=r.sent(),console.log("all nft outputs",n),[2,n]}}))}))},a.prototype.getUnspentOutputs=function(){var e;return n(this,void 0,void 0,(function(){var t,n;return r(this,(function(r){switch(r.label){case 0:return this._client?[4,this._client.basicOutputIds([{address:null!==(e=this._fromAddressBech32)&&void 0!==e?e:""},{hasExpiration:!1},{hasTimelock:!1},{hasStorageDepositReturn:!1}])]:[2];case 1:return t=r.sent(),[4,this._client.getOutputs(t)];case 2:return n=r.sent(),console.log("all outputs",n),n=n.filter((function(e){return!e.metadata.isSpent})),console.log("unspent outputs",n),[2,n]}}))}))},a.prototype.prepareAddress=function(){var e,t;return n(this,void 0,void 0,(function(){var n,a,s;return r(this,(function(r){switch(r.label){case 0:return null!=this._fromAddressBech32?[3,3]:(n=this._getSecretManager(),[4,null===(e=this._client)||void 0===e?void 0:e.generateAddresses(n,{accountIndex:0,range:{start:0,end:1}})]);case 1:return a=r.sent(),console.log("address",a),this._fromAddressBech32=a?a[0]:void 0,this._fromAddressBech32?(s=this,[4,null===(t=this._client)||void 0===t?void 0:t.bech32ToHex(this._fromAddressBech32)]):[3,3];case 2:s._fromAddressHex=r.sent(),r.label=3;case 3:return[2]}}))}))},a.prototype._encodeAddress=function(e){var n=new t.WriteStream;n.writeUInt8("Address Type ID",3);for(var r=t.Converter.hexToBytes(e),a=0;a<r.length;a++)n.writeUInt8("Address byte",r[a]);return n.finalHex()},a.prototype._getLayer2MetadataForTransfer=function(e,n,r,a){var s=new t.WriteStream;s.writeUInt32("senderContract",0),s.writeUInt32("targetContract",1011572226),s.writeUInt32("contractFunction",603251617),s.writeUInt64("gasBudget",V);var o=this._encodeAddress(e.toLowerCase()),i=Object.entries({a:o}),u=this._encodeSmartContractParameters(i);s.writeBytes("smartContractParameters",u.length,u);var c=this._encodeAllowance(n,r,a);return s.writeBytes("allowance",c.length,c),s.writeUInt16("end",0),"0x"+s.finalHex()},a.prototype._encodeAllowance=function(n,r,a){var s=new t.WriteStream,o=new t.WriteStream;if(s.writeUInt8("encodedAllowance",K.Set),null==r)s.writeUInt64("iotaAmount",e(n)),s.writeUInt16("noTokens",2),s.writeUInt16("emptyTokenBuffer",0);else{s.writeUInt64("iotaAmount",e(null!=a?a:"0")),o.writeUInt16("amountOfTokens",1);var i=t.Converter.hexToBytes(r.substring(2));o.writeBytes("tokenId",i.length,i),o.writeUInt256("amount",e(n));var u=o.finalBytes();s.writeUInt16("tokensLength",u.length),s.writeBytes("tokenBuffer",u.length,u)}return s.finalBytes()},a.prototype._getAmountFromTransactionDetails=function(e){var t=e.rawAmount,n=e.nftId,r=e.nativeTokenId,a=e.surplus;return null!=(t=n?n&&null!=a?a:"0":r?null!=a?a:"0":BigInt(t).toString())?t:"0"},a.prototype.getOutputOptions=function(a,s,o,i){return n(this,void 0,void 0,(function(){var n,u,c,d,l,f,p,h,g,_,b,w,y,v,m;return r(this,(function(r){switch(r.label){case 0:return n=i.nativeTokenId,u=i.metadata,c=i.tag,i.giftStorageDeposit,d=i.surplus,l=i.layer2Parameters,f=i.nftId,p=i.nftOutput,h=i.expirationDate,g=h?(S=h)?Math.round(S.getTime()/1e3):S:void 0,_=this._getAmountFromTransactionDetails({rawAmount:o,nftId:f,nativeTokenId:n,surplus:d}),_=l?this._addGasBudget(_):_,b=e(o),null!=c&&(c=t.Converter.utf8ToHex(c,!0)),u=l?this._getLayer2MetadataForTransfer(s,o,n,d):u?t.Converter.utf8ToHex(u,!0):u,l?[4,this._client.bech32ToHex(l.networkAddress)]:[3,2];case 1:return w=r.sent(),[3,3];case 2:w=s,r.label=3;case 3:return s=w,y={},f?y.nftId=f:n&&(y.nativeTokens=[{id:n,amount:"0x"+b.toString(16)}]),v=[],u&&v.push({type:2,data:u}),l&&v.push({type:0,address:a}),c&&v.push({type:3,tag:c}),m=[{type:0,address:{type:8,aliasId:"0xdc8631d5f2a0107200cf12cfec273342432c73db16ad4a7cb6a066e00abd8f0c"}}],g&&m.push({type:2,unixTime:g}),f&&p?[2,{type:6,amount:this._addGasBudget(p.amount),nftId:f,immutableFeatures:p.immutableFeatures,features:v,unlockConditions:m}]:[2,{type:3,amount:_,features:v,unlockConditions:m}]}var S}))}))},a.prototype.sendTransaction=function(t,a,s){var o,i;return n(this,void 0,void 0,(function(){var n,u,c,d,l,f,p,h,g,_,b,w,y,v,m,S;return r(this,(function(r){switch(r.label){case 0:return this._client&&this._fromAddressBech32?s?[4,this.getOutputForNftSend(s)]:[3,2]:[2];case 1:n=r.sent(),r.label=2;case 2:return[4,this.getOutputForSend(a)];case 3:return null==(u=r.sent())?[2]:(c=e(u.output.amount),d=e(a),(l=[]).push({type:0,transactionId:u.metadata.transactionId,transactionOutputIndex:u.metadata.outputIndex}),n&&l.push({type:0,transactionId:n.metadata.transactionId,transactionOutputIndex:n.metadata.outputIndex}),f=[],[4,this.getOutputOptions({type:0,pubKeyHash:null!==(o=this._fromAddressHex)&&void 0!==o?o:""},t,a,{nftId:s,nftOutput:null==n?void 0:n.output,layer2Parameters:{networkAddress:"rms1prwgvvw472spqusqeufvlmp8xdpyxtrnmvt26jnuk6sxdcq2hk8scku26h7"}})]);case 4:return p=r.sent(),console.log("receiveroutputs",p),f.push(p),c.gt(d)&&(h=c.minus(e(p.amount)),g={type:3,amount:h.toString(),nativeTokens:[],unlockConditions:[{type:0,address:{type:0,pubKeyHash:null!==(i=this._fromAddressHex)&&void 0!==i?i:""}}],features:[]},f.push(g)),console.log(f),_=this._getSecretManager(),b={inputs:l,outputs:f},console.log(b),[4,this._client.prepareTransaction(_,b)];case 5:return w=r.sent(),console.log(w),[4,this._client.signTransaction(_,w)];case 6:return y=r.sent(),console.log(y),[4,this._client.postBlockPayload(y)];case 7:return v=r.sent(),m=v[0],S=v[1],console.log(m,S),[2]}}))}))},a.prototype.ed2bech32=function(e){var t;null===(t=this._client)||void 0===t||t.hexToBech32(e,"rms")},a.prototype.parseLayer2MetadataForTransfer=function(e){var n,r,a=t.Converter.hexToBytes(e),s=new t.ReadStream(a),o=s.readUInt32("senderContract"),i=s.readUInt32("targetContract"),u=s.readUInt32("contractFunction"),c=s.readUInt64("gasBudget"),d="0x"+this._parseSmartContractParameters(s).a.substring(2),l=this._parseAllowance(s);return{senderContract:Q(o,!0),targetContract:null!==(n=z[i])&&void 0!==n?n:Q(i,!0),contractFunction:null!==(r=X[u])&&void 0!==r?r:Q(u,!0),gasBudget:c.toString(),ethereumAddress:d,baseTokenAmount:null==l?void 0:l.baseTokenAmount,nativeTokens:null==l?void 0:l.nativeTokens}},a.prototype._parseSmartContractParameters=function(e){for(var n=e.readUInt32("parametersLength"),r={},a=0;a<n;a++){var s=e.readUInt16("keyLength"),o=e.readBytes("keyValue",s),i=e.readUInt32("valueLength"),u=e.readBytes("valueBytes",i),c=t.Converter.bytesToUtf8(o),d=t.Converter.bytesToHex(u);r[c]=d}return r},a.prototype._parseAllowance=function(e){if(e.readUInt8("allowance")===K.Set){var n=e.readUInt64("baseTokenAmount").toString();e.readUInt16("tokenBufferBytesLength");for(var r=e.readUInt16("tokenAmount"),a=[],s=0;s<r;s++){var o=t.Converter.bytesToHex(e.readBytes("tokenId",38)),i=e.readUInt256("tokenAmount").toString();a.push({tokenId:o,amount:i})}return{baseTokenAmount:n,nativeTokens:a}}},a}());return window.l1tol2=Y,Y}(bigInt,IotaUtil);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
