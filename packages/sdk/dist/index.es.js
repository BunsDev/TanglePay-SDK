/**
                       * @license
                       * author: TanglePay
                       * tanglepaysdk-client.js v0.1.6
                       * Released under the Apache-2.0 license.
                       */
import{EventEmitter as e}from"events";import{WindowPostStream as n,JsonRpcEngine as t}from"tanglepaysdk-common";function o(e,n,t,o){return new(t||(t=Promise))((function(a,r){function i(e){try{c(o.next(e))}catch(e){r(e)}}function s(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))}function a(e,n){var t,o,a,r,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(s){return function(c){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;r&&(r=0,s[0]&&(i=0)),i;)try{if(t=1,o&&(a=2&s[0]?o.return:s[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,s[1])).done)return a;switch(o=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){i.label=s[1];break}if(6===s[0]&&i.label<a[1]){i.label=a[1],a=s;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(s);break}a[2]&&i.ops.pop(),i.trys.pop();continue}s=n.call(e,i)}catch(e){s=[6,e],o=0}finally{t=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}var r=["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"],i=function(e){(function(){for(var e=navigator.userAgent,n=0,t=r;n<t.length;n++){var o=t[n];if(e.includes(o))return!0}return!1})()?e&&window.open("https://chrome.google.com/webstore/detail/tanglepay-iota-wallet/hbneiaclpaaglopiogfdhgccebncnjmc?hl=en-US","TanglePay-Extension"):window.open("https://tanglepay.com/","TanglePay")},s={},c={},d=1,l=new n,u=t.builder().add((function(e,n){return o(void 0,void 0,void 0,(function(){return a(this,(function(t){return e.id=d++,e.version=101,e.params.cmd="injectToContent##".concat(e.params.cmd),e.params.origin=window.location.origin,e.params.id=e.id,[2,n(e)]}))}))})).add((function(e){return o(void 0,void 0,void 0,(function(){var n,t,o,r,i;return a(this,(function(a){return n=e.params,t=n.cmd,o=n.data,r=n.id,l.write(e.params),"injectToContent##iota_request"==t?(i=o.method,[2,new Promise((function(n,t){var o;c["iota_request_".concat(i,"_").concat(null!==(o=e.id)&&void 0!==o?o:0)]=function(e,o){if(200===o){if("iota_connect"===i){var a=e.address||"";s.curTanglePayAddress=a+"_"+e.nodeId}n({id:r,version:100,data:e})}else t(e)}}))]):[2,{id:e.id,version:100,data:void 0}]}))}))})).build(),v={redirectAppStoreIfNotInstalled:!1,isTanglePay:!1,tanglePayVersion:"",_events:new e,request:function(e){var n=e.method,t=e.params;return e.timeout,o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return v.isTanglePay||i(v.redirectAppStoreIfNotInstalled),n=["eth_sign","personal_sign"].includes(n)?"iota_sign":n,[4,u.request({params:{cmd:"iota_request",data:{method:n,params:t}}})];case 1:return[2,e.sent().data]}}))}))},on:function(e,n){var t="iota_event_".concat(e);v._events.on(t,n)},removeListener:function(e,n){v._events.removeListener(e,n)},removeAllListener:function(e){v._events.removeAllListeners(e)}};l.on("data",(function(e){var n=((null==e?void 0:e.cmd)||"").replace("contentToInject##",""),t=null==e?void 0:e.data,o=null==e?void 0:e.code,a=null==e?void 0:e.id;switch(n){case"getTanglePayInfo":v.tanglePayVersion=null==t?void 0:t.version,window.dispatchEvent(new CustomEvent("iota-ready"));break;case"iota_request":var r=c["iota_request_".concat(t.method,"_").concat(null!=a?a:0)];r&&r(t.response,o);break;case"iota_event":var i=t.method,d="iota_event_".concat(t.method),l=t.response;if("accountsChanged"===i){var u=l.address+"_"+l.nodeId;s.curTanglePayAddress!==u&&v._events.emit(d,l),s.curTanglePayAddress=u||""}else v._events.emit(d,l)}}));var f=0,p=function(){var e=window.TanglePayEnv;if(!e&&++f<=10)setTimeout(p,300);else switch(e){case"app":case"chrome":v.isTanglePay=!0,l.isMobile="app"==e,u.request({params:{cmd:"getTanglePayInfo"}});break;default:window.dispatchEvent(new CustomEvent("iota-ready")),i(v.redirectAppStoreIfNotInstalled)}};window.addEventListener("load",p);export{v as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
