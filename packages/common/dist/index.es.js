/**
                       * @license
                       * author: 
                       * tanglepaysdk-common.js v0.1.6
                       * Released under the ISC license.
                       */
import{Duplex as t}from"stream";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},e(t,n)};function n(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,s)}a((r=r.apply(t,e||[])).next())}))}function r(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(u=0)),u;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return u.label++,{value:s[1],done:!1};case 5:u.label++,r=s[1],s=[0];continue;case 7:s=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){u=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){u.label=s[1];break}if(6===s[0]&&u.label<i[1]){u.label=i[1],i=s;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(s);break}i[2]&&u.ops.pop(),u.trys.pop();continue}s=e.call(t,u)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}var i,o=function(){function t(){this._middlewares=[],this._handler=void 0}return t.builder=function(){return new t},t.prototype.add=function(t){return this._middlewares.push(t),this},t.prototype.build=function(){var t=this;this._middlewares=this._middlewares.reverse();for(var e=void 0,i=function(i){var o=e;e=function(e){return n(t,void 0,void 0,(function(){var t,n;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,i(e,o)];case 1:return[2,r.sent()];case 2:return t=r.sent(),n={code:99999,name:"unhandled exception",message:"unhandled exception",data:t},[2,{id:e.id,version:0,error:n}];case 3:return[2]}}))}))}},o=0,u=this._middlewares;o<u.length;o++){i(u[o])}return this._handler=e,this},t.prototype.request=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return this._handler?[2,this._handler(t)]:(e={code:99998,name:"uninit",message:"engine not initialized"},[2,{id:t.id,version:0,error:e}])}))}))},t}(),u=function(t){i=t},s=function(t,e){return n(void 0,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,null==i?void 0:i.eth.getBlock(t,e)];case 1:return[2,n.sent()]}}))}))},a=function(){return n(void 0,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,null==i?void 0:i.eth.getGasPrice()];case 1:return[2,t.sent()]}}))}))},c=function(t,e){return n(void 0,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,null==i?void 0:i.eth.sign(t,e)];case 1:return[2,n.sent()]}}))}))},l=function(t,e,o){return n(void 0,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,null==i?void 0:i.eth.personal.sign(t,e,o)];case 1:return[2,n.sent()]}}))}))},f=function(t){function n(e){var n=this,r=Object.assign(null!=e?e:{},{readableObjectMode:!0,writableObjectMode:!0});return(n=t.call(this,r)||this)._isMobile=!1,window.addEventListener("message",(function(t){var e=t.data;n.push(e)}),!1),n}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}(n,t),Object.defineProperty(n.prototype,"isMobile",{set:function(t){this._isMobile=t},enumerable:!1,configurable:!0}),n.prototype._write=function(t,e,n){var r=window;this._isMobile&&r.ReactNativeWebView?r.ReactNativeWebView.postMessage(JSON.stringify(t)):window.postMessage(t,"*"),n()},n.prototype._read=function(t){},n}(t);export{o as JsonRpcEngine,f as WindowPostStream,a as ethGasPrice,s as ethGetBlockByNumber,l as ethPersonalSign,c as ethSign,u as setWeb3Client};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
