/**
                       * @license
                       * author: TanglePay
                       * tanglepaysdk-ethereumprovider.js v0.1.6
                       * Released under the Apache-2.0 license.
                       */
import{EventEmitter as n}from"events";import e from"tanglepaysdk-client";import{JsonRpcEngine as t}from"tanglepaysdk-common";var r=function(n,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},r(n,e)};var o=function(){return o=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n},o.apply(this,arguments)};function i(n,e,t,r){return new(t||(t=Promise))((function(o,i){function a(n){try{s(r.next(n))}catch(n){i(n)}}function c(n){try{s(r.throw(n))}catch(n){i(n)}}function s(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((r=r.apply(n,e||[])).next())}))}function a(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(t=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=e.call(n,a)}catch(n){c=[6,n],r=0}finally{t=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}var c=new(function(n){function c(){var r=n.call(this)||this;r._version=101,r._seq=1;var c=function(n){return function(e,t){return i(r,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:return console.log("req:"+n,e),[4,t(e)];case 1:return r=o.sent(),console.log("resp:"+n,r),[2,r]}}))}))}};r._rpcEngine=t.builder().add((function(n,t){return i(r,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:if(null!=this._selectedAddress)return[3,4];o.label=1;case 1:return o.trys.push([1,3,,4]),[4,e.request({method:"iota_connect",params:{}})];case 2:if(!(r=o.sent())||!r.address)throw new Error("not connected");return this._selectedAddress=r.address,[3,4];case 3:throw o.sent();case 4:return[4,t(n)];case 5:return[2,o.sent()]}}))}))})).add(c("1")).add((function(n,e){return i(r,void 0,void 0,(function(){return a(this,(function(t){return n.id=this._seq++,n.version=this._version,[2,e(n)]}))}))})).add((function(n,e){return i(r,void 0,void 0,(function(){var t,r,i,c,s,u,l,d,f,h,p,v;return a(this,(function(a){switch(a.label){case 0:return t={eth_requestAccounts:"iota_accounts",eth_connect:"iota_connect"},r={eth_sign:function(n){return n.reverse()},personal_sign:function(n){return{content:n}},eth_sendTransaction:function(n){var e=n[0];return e.value=parseInt(e.value),e},eth_getBalance:function(){return{assetsList:["evm"],addressList:[]}}},i=function(n){return n},c=n.method,(s=o({},n)).method=null!==(h=t[c])&&void 0!==h?h:c,u=null!==(p=r[c])&&void 0!==p?p:i,s.params=u(s.params),[4,e(s)];case 1:return l=a.sent(),d=null!==(v={eth_connect:function(n){return[n.address]},eth_getBalance:function(n){return n.amount}}[c])&&void 0!==v?v:i,(f=o({},l)).data=d(l.data),[2,f]}}))}))})).add(c("2")).add((function(n){return i(r,void 0,void 0,(function(){var t,r,o,i;return a(this,(function(a){switch(a.label){case 0:return t=n.method,r=n.params,o=n.id,[4,e.request({method:t,params:r})];case 1:return i=a.sent(),[2,{id:o,version:100,data:i}]}}))}))})).build();for(var s={connect:r._handleConnect,disconnect:r._handleDisconnect,message:r._handleMessage,chainChanged:r._handleChainChanged,accountsChanged:r._handleAccountsChanged},u=0,l=Object.entries(s);u<l.length;u++){var d=l[u],f=d[0],h=d[1];e.on(f,h.bind(r))}return r}return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=n}r(n,e),n.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}(c,n),Object.defineProperty(c.prototype,"isTanglePay",{get:function(){return!0},enumerable:!1,configurable:!0}),Object.defineProperty(c.prototype,"selectedAddress",{get:function(){return this._selectedAddress},enumerable:!1,configurable:!0}),c.prototype._handleConnect=function(n){this.emit("connect",n)},c.prototype._handleDisconnect=function(n){this.emit("disconnect",n)},c.prototype._handleMessage=function(n){this.emit("message",n)},c.prototype._handleChainChanged=function(n){this.emit("chainChanged",n)},c.prototype._handleAccountsChanged=function(n){this.emit("accountsChanged",n)},c.prototype.request=function(n){return i(this,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return[4,this._rpcEngine.request(n)];case 1:if((e=t.sent()).error)throw e.error;return[2,e.data]}}))}))},c}(n));window.ethereum=c;export{c as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
