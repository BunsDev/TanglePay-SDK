/**
   * @license
   * author: TanglePay
   * tanglepay-sdk.js v0.0.8
   * Released under the Apache-2.0 license.
   */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var e=function(){return e=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},e.apply(this,arguments)};function n(e,n,t,a){return new(t||(t=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function c(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(r,c)}l((a=a.apply(e,n||[])).next())}))}function t(e,n){var t,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!(o=r.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=n.call(e,r)}catch(e){i=[6,e],a=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}var a=["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"],o=function(e){(function(){for(var e=navigator.userAgent,n=0,t=a;n<t.length;n++){var o=t[n];if(e.includes(o))return!0}return!1})()?e&&window.open("https://chrome.google.com/webstore/detail/tanglepay-iota-wallet/hbneiaclpaaglopiogfdhgccebncnjmc?hl=en-US","TanglePay-Extension"):window.open("https://tanglepay.com/","TanglePay")},i=function(e){e.cmd="injectToContent##".concat(e.cmd),e.origin=window.location.origin;var n=window;"app"===n.TanglePayEnv&&n.ReactNativeWebView?n.ReactNativeWebView.postMessage(JSON.stringify(e)):window.postMessage(e,"*")},r={},c={},l={},s={redirectAppStoreIfNotInstalled:!1,isTanglePay:!1,tanglePayVersion:"",request:function(e){var a=e.method,r=e.params,d=e.timeout,u=void 0===d?3e4:d;return n(void 0,void 0,void 0,(function(){return t(this,(function(e){return s.isTanglePay||o(s.redirectAppStoreIfNotInstalled),a=["eth_sign","personal_sign"].includes(a)?"iota_sign":a,[2,new Promise((function(e,n){l["iota_request_".concat(a)]=function(t,o){if(200===o){if("iota_connect"===a){var i=t.address||"";c.curTanglePayAddress=i+"_"+t.nodeId}e(t)}else n(t)},setTimeout((function(){n()}),u),i({cmd:"iota_request",data:{method:a,params:r}})}))]}))}))},on:function(n,t){var a="iota_event_".concat(n),o="".concat((new Date).getTime()).concat(Math.round(1e3*Math.random()));r[a]=r[a]||[],r[a].push({id:o,handler:function(a){if("accountsChanged"===n){var o=a.address+"_"+a.nodeId;c.curTanglePayAddress!==o&&t&&t&&t(e({},a)),c.curTanglePayAddress=o||""}else t&&t(a)},callBack:t})},removeListener:function(e,n){var t="iota_event_".concat(e),a=r[t]||[],o=a.findIndex((function(e){return e.callBack===n}));o>=0&&a.splice(o,1)},removeAllListener:function(e){var n="iota_event_".concat(e);r[n]=[]}};window.addEventListener("message",(function(e){var n,t,a,o=((null===(n=null==e?void 0:e.data)||void 0===n?void 0:n.cmd)||"").replace("contentToInject##",""),i=null===(t=null==e?void 0:e.data)||void 0===t?void 0:t.data,c=null===(a=null==e?void 0:e.data)||void 0===a?void 0:a.code;switch(o){case"getTanglePayInfo":s.tanglePayVersion=null==i?void 0:i.version,window.dispatchEvent(new CustomEvent("iota-ready"));break;case"iota_request":var d=l["iota_request_".concat(i.method)];d&&d(i.response,c);break;case"iota_event":(r["".concat(o,"_").concat(i.method)]||[]).forEach((function(e){e.handler&&e.handler(i.response,c)}))}}),!1);var d=0,u=function(){var e=window.TanglePayEnv;if(!e&&++d<=10)setTimeout(u,300);else switch(e){case"app":case"chrome":s.isTanglePay=!0,i({cmd:"getTanglePayInfo"});break;default:window.dispatchEvent(new CustomEvent("iota-ready")),o(s.redirectAppStoreIfNotInstalled)}};window.addEventListener("load",u);export{s as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
